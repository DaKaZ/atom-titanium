{
    "properties": {
        "bubbleParent": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Indicates if the proxy will bubble an event to its parent.</p>"
        },
        "lifecycleContainer": {
            "values": [],
            "description": "<p>The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.</p>"
        },
        "accessibilityHidden": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Whether the view should be \"hidden\" from (i.e., ignored by) the accessibility service.</p>"
        },
        "accessibilityHint": {
            "values": [],
            "description": "<p>Briefly describes what performing an action (such as a click) on the view will do.</p>"
        },
        "accessibilityLabel": {
            "values": [],
            "description": "<p>A succint label identifying the view for the device's accessibility service.</p>"
        },
        "accessibilityValue": {
            "values": [],
            "description": "<p>A string describing the value (if any) of the view for the device's accessibility service.</p>"
        },
        "anchorPoint": {
            "values": [],
            "description": "<p>Coordinate of the view about which to pivot an animation.</p>"
        },
        "backgroundDisabledColor": {
            "values": [],
            "description": "<p>Disabled background color of the view, as a color name or hex triplet.</p>"
        },
        "backgroundDisabledImage": {
            "values": [],
            "description": "<p>Disabled background image for the view, specified as a local file path or URL.</p>"
        },
        "backgroundFocusedColor": {
            "values": [],
            "description": "<p>Focused background color of the view, as a color name or hex triplet.</p>"
        },
        "backgroundFocusedImage": {
            "values": [],
            "description": "<p>Focused background image for the view, specified as a local file path or URL.</p>"
        },
        "backgroundGradient": {
            "values": [],
            "description": "<p>A background gradient for the view.</p>"
        },
        "backgroundRepeat": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines whether to tile a background across a view.</p>"
        },
        "backgroundLeftCap": {
            "values": [],
            "description": "<p>Size of the left end cap.</p>"
        },
        "backgroundSelectedColor": {
            "values": [],
            "description": "<p>Selected background color of the view, as a color name or hex triplet.</p>"
        },
        "backgroundSelectedImage": {
            "values": [],
            "description": "<p>Selected background image url for the view, specified as a local file path or URL.</p>"
        },
        "backgroundTopCap": {
            "values": [],
            "description": "<p>Size of the top end cap.</p>"
        },
        "clipMode": {
            "values": [],
            "description": "<p>View's clipping behavior.</p>"
        },
        "elevation": {
            "values": [],
            "description": "<p>Sets the elevation of this view</p>"
        },
        "focusable": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Whether view should be focusable while navigating with the trackball.</p>"
        },
        "overrideCurrentAnimation": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>When on, animate call overrides current animation if applicable.</p>"
        },
        "pullBackgroundColor": {
            "values": [],
            "description": "<p>Background color of the wrapper view when this view is used as either <a href=\"Titanium.UI.ListView.pullView\">pullView</a> or <a href=\"Titanium.UI.TableView.headerPullView\">headerPullView</a>.</p>"
        },
        "softKeyboardOnFocus": {
            "values": [
                "Ti.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS",
                "Ti.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS",
                "Ti.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS",
                "Ti.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS",
                "Ti.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS",
                "Ti.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS"
            ],
            "description": "<p>Determines keyboard behavior when this view is focused.</p>"
        },
        "transform": {
            "values": [],
            "description": "<p>Transformation matrix to apply to the view.</p>"
        },
        "viewShadowRadius": {
            "values": [],
            "description": "<p>Determines the blur radius used to create the shadow.</p>"
        },
        "viewShadowColor": {
            "values": [],
            "description": "<p>Determines the color of the shadow.</p>"
        },
        "viewShadowOffset": {
            "values": [],
            "description": "<p>Determines the offset for the shadow of the view.</p>"
        },
        "horizontalWrap": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines whether the layout has wrapping behavior.</p>"
        },
        "keepScreenOn": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines whether to keep the device screen on.</p>"
        },
        "backgroundImage": {
            "values": [],
            "description": "<p>Background image for the view, specified as a local file path or URL.</p>"
        },
        "backgroundColor": {
            "values": [],
            "description": "<p>Background color of the view, as a color name or hex triplet.</p>"
        },
        "borderColor": {
            "values": [],
            "description": "<p>Border color of the view, as a color name or hex triplet.</p>"
        },
        "borderRadius": {
            "values": [],
            "description": "<p>Radius for the rounded corners of the view's border.</p>"
        },
        "borderWidth": {
            "values": [],
            "description": "<p>Border width of the view.</p>"
        },
        "bottom": {
            "values": [],
            "description": "<p>View's bottom position, in platform-specific units.</p>"
        },
        "center": {
            "values": [],
            "description": "<p>View's center position, in the parent view's coordinates.</p>"
        },
        "height": {
            "values": [
                "Ti.UI.FILL",
                "Ti.UI.SIZE",
                "Ti.UI.FILL",
                "Ti.UI.SIZE"
            ],
            "description": "<p>View height, in platform-specific units.</p>"
        },
        "layout": {
            "values": [],
            "description": "<p>Specifies how the view positions its children. \nOne of: 'composite', 'vertical', or 'horizontal'.</p>"
        },
        "left": {
            "values": [],
            "description": "<p>View's left position, in platform-specific units.</p>"
        },
        "opacity": {
            "values": [],
            "description": "<p>Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).</p>"
        },
        "right": {
            "values": [],
            "description": "<p>View's right position, in platform-specific units.</p>"
        },
        "tintColor": {
            "values": [],
            "description": "<p>The view's tintColor. This property is applicable on iOS 7 and greater.</p>"
        },
        "top": {
            "values": [],
            "description": "<p>The view's top position.</p>"
        },
        "touchEnabled": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines whether view should receive touch events.</p>"
        },
        "visible": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines whether the view is visible.</p>"
        },
        "width": {
            "values": [
                "Ti.UI.FILL",
                "Ti.UI.SIZE",
                "Ti.UI.FILL",
                "Ti.UI.SIZE"
            ],
            "description": "<p>View's width, in platform-specific units.</p>"
        },
        "zIndex": {
            "values": [],
            "description": "<p>Z-index stack order position, relative to other sibling views.</p>"
        },
        "success": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Indicates whether the request succeeded.</p>"
        },
        "error": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Indicates whether the request failed.</p>"
        },
        "meta": {
            "values": [],
            "description": "<p>Meta data, if any returned.</p>"
        },
        "code": {
            "values": [
                "Ti.Media.DEVICE_BUSY",
                "Ti.Media.NO_CAMERA",
                "Ti.Media.UNKNOWN_ERROR"
            ],
            "description": "<p>Error code, if any returned.</p>"
        },
        "message": {
            "values": [],
            "description": "<p>Error message, if any returned.</p>"
        },
        "acls": {
            "values": [],
            "description": "<p>Set of ACL objects, if any exist.</p>"
        },
        "permission": {
            "values": [],
            "description": "<p>Dictionary of permissions.</p>"
        },
        "chats": {
            "values": [],
            "description": "<p>Set of <code>chats</code> objects, if any exist.</p>"
        },
        "chat_groups": {
            "values": [],
            "description": "<p>Set of <code>chat_groups</code> objects, if any exist.</p>"
        },
        "checkins": {
            "values": [],
            "description": "<p>Set of <code>checkins</code> objects, if any exist.</p>"
        },
        "ip_address": {
            "values": [],
            "description": "<p>IP address of client.</p>"
        },
        "location": {
            "values": [
                "Ti.UI.Android.PROGRESS_INDICATOR_DIALOG",
                "Ti.UI.Android.PROGRESS_INDICATOR_STATUS_BAR"
            ],
            "description": "<p>Location of client.</p>"
        },
        "debug": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Indicates whether internal debug logging should be output to the console.</p>"
        },
        "ondatastream": {
            "values": [],
            "description": "<p>Function to be called at regular intervals as the request data is being received.</p>"
        },
        "onsendstream": {
            "values": [],
            "description": "<p>Function to be called at regular intervals as the request data is being transmitted.</p>"
        },
        "useSecure": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Indicates whether to use SSL when sending requests to ArrowDB. **Removed in 3.1.1. To disable SSL, set the <code>acs-base-url</code> and <code>acs-authbase-url</code> properties in the <code>tiapp.xml</code> using the HTTP URL.\nTo enable SSL, use the HTTPS URL.</p>\n\n<pre><code>&lt;property name=\"acs-base-url\" type=\"string\"&gt;http://api.cloud.appcelerator.com&lt;/property&gt;**\n</code></pre>"
        },
        "sessionId": {
            "values": [],
            "description": "<p>Identifies the current session</p>"
        },
        "accessToken": {
            "values": [],
            "description": "<p>Identifies the current access token when using 3-Legged OAuth</p>"
        },
        "progress": {
            "values": [],
            "description": "<p>A value from 0.0-1.0 with the progress of the exchange.</p>"
        },
        "url": {
            "values": [],
            "description": "<p>The URL for the request, to help identify it.</p>"
        },
        "events": {
            "values": [],
            "description": "<p>Set of <code>event</code> objects, if any exist.</p>"
        },
        "event_occurrences": {
            "values": [],
            "description": "<p>Set of <code>event</code> objects, if any exist.</p>"
        },
        "files": {
            "values": [],
            "description": "<p>Set of <code>file</code> objects, if any exist.</p>"
        },
        "users": {
            "values": [],
            "description": "<p>Set of <code>user</code> objects, if any exist.</p>"
        },
        "friend_requests": {
            "values": [],
            "description": "<p>Set of <code>user</code> objects, if any exist.</p>"
        },
        "geo_fences": {
            "values": [],
            "description": "<p>Set of geo-fence objects, if any exist.</p>"
        },
        "keyvalues": {
            "values": [],
            "description": "<p>Set of <code>keyvalues</code> objects, if any exist.</p>"
        },
        "likes": {
            "values": [],
            "description": "<p>Set of <code>like</code> objects, if any exist.</p>"
        },
        "messages": {
            "values": [],
            "description": "<p>Set of <code>message</code> objects, if any exist.</p>"
        },
        "classname": {
            "values": [],
            "description": "<p>Set of <code>classname</code> objects, if any exist.</p>"
        },
        "collections": {
            "values": [],
            "description": "<p>Set of <code>collections</code> objects, if any exist.</p>"
        },
        "photos": {
            "values": [],
            "description": "<p>Set of <code>photos</code> objects, if any exist.</p>"
        },
        "places": {
            "values": [],
            "description": "<p>Set of <code>places</code> objects, if any exist.</p>"
        },
        "posts": {
            "values": [],
            "description": "<p>Set of <code>posts</code> objects, if any exist.</p>"
        },
        "push_channels": {
            "values": [],
            "description": "<p>Array of <code>push_channel</code> names, if any exist.</p>"
        },
        "devices": {
            "values": [],
            "description": "<p>Dictionary containing counts of devices subscribed to a push channel, grouped by platform.</p>"
        },
        "subscriptions": {
            "values": [],
            "description": "<p>Set of <code>subscription</code> objects, if any exist.</p>"
        },
        "push_schedules": {
            "values": [],
            "description": "<p>Array of <a href=\"http://docs.appcelerator.com/arrowdb/latest/#!/api/PushSchedules\">schedules push notifications</a>, if any exist.</p>"
        },
        "reviews": {
            "values": [],
            "description": "<p>Set of <code>reviews</code> objects, if any exist.</p>"
        },
        "statuses": {
            "values": [],
            "description": "<p>Set of <code>statuses</code> objects, if any exist.</p>"
        },
        "title": {
            "values": [],
            "description": "<p>Defines the title for the dialog.</p>"
        },
        "expiresIn": {
            "values": [],
            "description": "<p>Indicates the number of seconds before the access token expires.</p>"
        },
        "enabled": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Whether or not this device will receive push notifications. <strong>Deprecated since 3.2.0. This property was only required to enable push notifications for the legacy MQTT\nprotocol.</strong></p>"
        },
        "showTrayNotification": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Whether or not to show a tray notification when a new push is received.</p>"
        },
        "showAppOnTrayClick": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Whether or not clicking the tray notification will bring your application to the foreground.</p>"
        },
        "showTrayNotificationsWhenFocused": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Whether or not to show tray notifications when your application is in the foreground.</p>"
        },
        "focusAppOnPush": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Whether or not your application is brought to the foreground whenever a new push is received.</p>"
        },
        "singleCallback": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Set to true to trigger a single callback for the selected push notification when multiple push notifications are displayed in the tray.</p>"
        },
        "deviceToken": {
            "values": [],
            "description": "<p>The device token which this device was registered for.</p>"
        },
        "displayHomeAsUp": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Displays an \"up\" affordance on the \"home\" area of the action bar.</p>"
        },
        "homeButtonEnabled": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Enable or disable the \"home\" button in the corner of the action bar.</p>"
        },
        "icon": {
            "values": [],
            "description": "<p>Sets the application icon displayed in the \"home\" area of the action bar, specified as a local file path or URL.</p>"
        },
        "logo": {
            "values": [],
            "description": "<p>Sets the application logo displayed in the \"home\" area of the action bar, specified as a local file path or URL.</p>"
        },
        "navigationMode": {
            "values": [],
            "description": "<p>Controls the navigation mode.</p>"
        },
        "onHomeIconItemSelected": {
            "values": [],
            "description": "<p>Callback function called when the home icon is clicked.</p>"
        },
        "subtitle": {
            "values": [],
            "description": "<p>Sets the subtitle of the action bar.</p>"
        },
        "onCreate": {
            "values": [],
            "description": "<p>Callback function called when the Android activity is created.</p>"
        },
        "onCreateOptionsMenu": {
            "values": [],
            "description": "<p>Callback function called to initially create an Android options menu\nfor this Activity when the user presses the <strong>Menu</strong> button.</p>"
        },
        "onDestroy": {
            "values": [],
            "description": "<p>Callback function called when the Android activity is destroyed.</p>"
        },
        "onPause": {
            "values": [],
            "description": "<p>Callback function called when the Android activity is paused.</p>"
        },
        "onPrepareOptionsMenu": {
            "values": [],
            "description": "<p>Callback function called to prepare an options menu for display when the user presses\nthe <strong>Menu</strong> button. </p>"
        },
        "onRestart": {
            "values": [],
            "description": "<p>Callback function called when the Android activity is restarted.</p>"
        },
        "onResume": {
            "values": [],
            "description": "<p>Callback function called when the Android activity is resumed.</p>"
        },
        "onStart": {
            "values": [],
            "description": "<p>Callback function called when the Android activity is started.</p>"
        },
        "onStop": {
            "values": [],
            "description": "<p>Callback function called when the Android activity is stopped.</p>"
        },
        "requestedOrientation": {
            "values": [
                "Ti.Android.SCREEN_ORIENTATION_BEHIND",
                "Ti.Android.SCREEN_ORIENTATION_LANDSCAPE",
                "Ti.Android.SCREEN_ORIENTATION_NOSENSOR",
                "Ti.Android.SCREEN_ORIENTATION_PORTRAIT",
                "Ti.Android.SCREEN_ORIENTATION_SENSOR",
                "Ti.Android.SCREEN_ORIENTATION_UNSPECIFIED",
                "Ti.Android.SCREEN_ORIENTATION_USER"
            ],
            "description": "<p>Specifies a specific orientation for this activity.</p>"
        },
        "requestCode": {
            "values": [],
            "description": "<p>Unique, automatically generated integer request code.</p>"
        },
        "resultCode": {
            "values": [],
            "description": "<p>Integer result code that the started activity passed to\n<a href=\"Titanium.Android.Activity.setResult\">setResult</a>.</p>"
        },
        "intent": {
            "values": [],
            "description": "<p>Intent that can contain data returned to the caller. Data can be attached to\nthe intent as \"extras\").</p>"
        },
        "startMode": {
            "values": [
                "Ti.Android.START_NOT_STICKY",
                "Ti.Android.START_REDELIVER_INTENT"
            ],
            "description": "<p>One of the <code>START_</code> constants from <a href=\"Titanium.Android\">Android</a> to specify the \"stickiness\" of the Service when Android shuts down the host application.</p>"
        },
        "onReceived": {
            "values": [],
            "description": "<p>The function called when a broadcast is received.</p>"
        },
        "action": {
            "values": [],
            "description": "<p>The action associated with this intent.</p>"
        },
        "className": {
            "values": [],
            "description": "<p>The Java class name of the activity associated with this intent\n(<a href=\"Titanium.Android.Intent.packageName\">packageName</a> must also be set).</p>"
        },
        "flags": {
            "values": [
                "Ti.Android.FLAG_ACTIVITY_BROUGHT_TO_FRONT",
                "Ti.Android.FLAG_ACTIVITY_CLEAR_TOP",
                "Ti.Android.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET",
                "Ti.Android.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS",
                "Ti.Android.FLAG_ACTIVITY_FORWARD_RESULT",
                "Ti.Android.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY",
                "Ti.Android.FLAG_ACTIVITY_MULTIPLE_TASK",
                "Ti.Android.FLAG_ACTIVITY_NEW_TASK",
                "Ti.Android.FLAG_ACTIVITY_NO_ANIMATION",
                "Ti.Android.FLAG_ACTIVITY_NO_HISTORY",
                "Ti.Android.FLAG_ACTIVITY_NO_USER_ACTION",
                "Ti.Android.FLAG_ACTIVITY_PREVIOUS_IS_TOP",
                "Ti.Android.FLAG_ACTIVITY_REORDER_TO_FRONT",
                "Ti.Android.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED",
                "Ti.Android.FLAG_ACTIVITY_SINGLE_TOP",
                "Ti.Android.FLAG_DEBUG_LOG_RESOLUTION",
                "Ti.Android.FLAG_FROM_BACKGROUND",
                "Ti.Android.FLAG_GRANT_READ_URI_PERMISSION",
                "Ti.Android.FLAG_GRANT_WRITE_URI_PERMISSION",
                "Ti.Android.FLAG_RECEIVER_REGISTERED_ONLY",
                "Ti.Android.FLAG_CANCEL_CURRENT",
                "Ti.Android.FLAG_NO_CREATE",
                "Ti.Android.FLAG_ONE_SHOT",
                "Ti.Android.FLAG_UPDATE_CURRENT",
                "Ti.Android.FLAG_AUTO_CANCEL",
                "Ti.Android.FLAG_INSISTENT",
                "Ti.Android.FLAG_NO_CLEAR",
                "Ti.Android.FLAG_ONGOING_EVENT",
                "Ti.Android.FLAG_ONLY_ALERT_ONCE",
                "Ti.Android.FLAG_SHOW_LIGHTS",
                "Ti.Android.FLAG_CANCEL_CURRENT",
                "Ti.Android.FLAG_NO_CREATE",
                "Ti.Android.FLAG_ONE_SHOT",
                "Ti.Android.FLAG_UPDATE_CURRENT"
            ],
            "description": "<p>Intent flags.</p>"
        },
        "packageName": {
            "values": [],
            "description": "<p>The fully-qualified Java package name of the activity.</p>"
        },
        "actionView": {
            "values": [],
            "description": "<p>Custom view that replaces the default menu item button.</p>"
        },
        "checkable": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines if the item can be checked.</p>"
        },
        "checked": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines if the item is checked.</p>"
        },
        "showAsAction": {
            "values": [
                "Ti.Android.SHOW_AS_ACTION_ALWAYS",
                "Ti.Android.SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW",
                "Ti.Android.SHOW_AS_ACTION_IF_ROOM",
                "Ti.Android.SHOW_AS_ACTION_NEVER",
                "Ti.Android.SHOW_AS_ACTION_WITH_TEXT"
            ],
            "description": "<p>A set of flags that controls how this item appears in the action bar.</p>"
        },
        "titleCondensed": {
            "values": [],
            "description": "<p>Shortened version of the item's title.</p>"
        },
        "audioStreamType": {
            "values": [
                "Ti.Android.STREAM_ALARM",
                "Ti.Android.STREAM_DEFAULT",
                "Ti.Android.STREAM_MUSIC",
                "Ti.Android.STREAM_NOTIFICATION",
                "Ti.Android.STREAM_RING",
                "Ti.Android.STREAM_SYSTEM",
                "Ti.Android.STREAM_VOICE_CALL"
            ],
            "description": "<p>The audio stream type to use when playing the sound.</p>"
        },
        "category": {
            "values": [
                "Ti.Android.CATEGORY_ALTERNATIVE",
                "Ti.Android.CATEGORY_BROWSABLE",
                "Ti.Android.CATEGORY_DEFAULT",
                "Ti.Android.CATEGORY_DEVELOPMENT_PREFERENCE",
                "Ti.Android.CATEGORY_EMBED",
                "Ti.Android.CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST",
                "Ti.Android.CATEGORY_HOME",
                "Ti.Android.CATEGORY_INFO",
                "Ti.Android.CATEGORY_LAUNCHER",
                "Ti.Android.CATEGORY_MONKEY",
                "Ti.Android.CATEGORY_OPENABLE",
                "Ti.Android.CATEGORY_PREFERENCE",
                "Ti.Android.CATEGORY_SAMPLE_CODE",
                "Ti.Android.CATEGORY_SELECTED_ALTERNATIVE",
                "Ti.Android.CATEGORY_TAB",
                "Ti.Android.CATEGORY_TEST",
                "Ti.Android.CATEGORY_UNIT_TEST",
                "Ti.Android.CATEGORY_ALARM",
                "Ti.Android.CATEGORY_CALL",
                "Ti.Android.CATEGORY_EMAIL",
                "Ti.Android.CATEGORY_ERROR",
                "Ti.Android.CATEGORY_EVENT",
                "Ti.Android.CATEGORY_MESSAGE",
                "Ti.Android.CATEGORY_PROGRESS",
                "Ti.Android.CATEGORY_PROMO",
                "Ti.Android.CATEGORY_RECOMMENDATION",
                "Ti.Android.CATEGORY_SERVICE",
                "Ti.Android.CATEGORY_SOCIAL",
                "Ti.Android.CATEGORY_STATUS",
                "Ti.Android.CATEGORY_TRANSPORT"
            ],
            "description": "<p>Sets the notification's category.</p>"
        },
        "contentIntent": {
            "values": [],
            "description": "<p>The <code>PendingIntent</code> to execute when the expanded status entry is clicked.</p>"
        },
        "contentText": {
            "values": [],
            "description": "<p>Description text of the notification.</p>"
        },
        "contentTitle": {
            "values": [],
            "description": "<p>Title of the notification.</p>"
        },
        "contentView": {
            "values": [],
            "description": "<p>Custom layout to display in the notification.</p>"
        },
        "defaults": {
            "values": [
                "Ti.Android.DEFAULT_ALL",
                "Ti.Android.DEFAULT_LIGHTS",
                "Ti.Android.DEFAULT_SOUND",
                "Ti.Android.DEFAULT_VIBRATE"
            ],
            "description": "<p>Specifies which values should be taken from the defaults.</p>"
        },
        "deleteIntent": {
            "values": [],
            "description": "<p>The <code>PendingIntent</code> to execute when the status entry is deleted by the user with the \"Clear All Notifications\" button.</p>"
        },
        "largeIcon": {
            "values": [],
            "description": "<p>Add a large icon to the notification (and the ticker on some devices) specified as an Android resource ID, or a local URL to a density-specific image.</p>"
        },
        "ledARGB": {
            "values": [],
            "description": "<p>The color for the LED to blink.</p>"
        },
        "ledOffMS": {
            "values": [],
            "description": "<p>The number of milliseconds for the LED to be off while it's flashing.</p>"
        },
        "ledOnMS": {
            "values": [],
            "description": "<p>The number of milliseconds for the LED to be on while it's flashing.</p>"
        },
        "number": {
            "values": [],
            "description": "<p>The number of events that this notification represents.</p>"
        },
        "priority": {
            "values": [
                "Ti.Android.PRIORITY_MAX",
                "Ti.Android.PRIORITY_HIGH",
                "Ti.Android.PRIORITY_DEFAULT",
                "Ti.Android.PRIORITY_LOW",
                "Ti.Android.PRIORITY_MIN"
            ],
            "description": "<p>Sets the priority of the notification.</p>"
        },
        "sound": {
            "values": [],
            "description": "<p>A URL to the sound to play.</p>"
        },
        "tickerText": {
            "values": [],
            "description": "<p>Text to scroll across the screen when this item is added to the status bar.</p>"
        },
        "visibility": {
            "values": [
                "Ti.Android.VISIBILITY_PRIVATE",
                "Ti.Android.VISIBILITY_PUBLIC",
                "Ti.Android.VISIBILITY_SECRET"
            ],
            "description": "<p>Allows user to conceal private information of the notification on the lockscreen.</p>"
        },
        "when": {
            "values": [],
            "description": "<p>The timestamp for the notification (defaults to the current time).</p>"
        },
        "updateCurrentIntent": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>If this property is true, flag <a href=\"Titanium.Android.FLAG_UPDATE_CURRENT\">FLAG_UPDATE_CURRENT</a> will be\nappended to <code>flags</code> automatically. Default value is true.</p>"
        },
        "layoutId": {
            "values": [],
            "description": "<p>Android layout resource ID for the view to display. Required.</p>"
        },
        "disableNetworkActivityIndicator": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Prevents network activity indicator from being displayed.</p>"
        },
        "forceSplashAsSnapshot": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Shows the application's splash screen on app resume.</p>"
        },
        "idleTimerDisabled": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines whether the screen is locked when the device is idle.</p>"
        },
        "proximityDetection": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines whether proximity detection is enabled.</p>"
        },
        "source": {
            "values": [],
            "description": "<p>This key indicates that the application was launched by another\napplication with the specified bundle ID.</p>"
        },
        "launchOptionsLocationKey": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>If set to <code>true</code>, this key indicates that the application was launched in response to an\nincoming location event.</p>"
        },
        "attributeSet": {
            "values": [],
            "description": "<p>Set of metadata properties to display for the item.</p>"
        },
        "domainIdentifier": {
            "values": [],
            "description": "<p>Identifier that represents the \"domain\" or owner of this item.</p>"
        },
        "expirationDate": {
            "values": [],
            "description": "<p>Searchable items have an expiration date or time to live.  By default it is set to one month.</p>"
        },
        "uniqueIdentifier": {
            "values": [],
            "description": "<p>Unique identifier to your application group.</p>"
        },
        "itemContentType": {
            "values": [
                "Ti.App.iOS.UTTYPE_TEXT",
                "Ti.App.iOS.UTTYPE_PLAIN_TEXT",
                "Ti.App.iOS.UTTYPE_UTF8_PLAIN_TEXT",
                "Ti.App.iOS.UTTYPE_UTF16_EXTERNAL_PLAIN_TEXT",
                "Ti.App.iOS.UTTYPE_UTF16_PLAIN_TEXT",
                "Ti.App.iOS.UTTYPE_RTF",
                "Ti.App.iOS.UTTYPE_HTML",
                "Ti.App.iOS.UTTYPE_XML",
                "Ti.App.iOS.UTTYPE_PDF",
                "Ti.App.iOS.UTTYPE_RTFD",
                "Ti.App.iOS.UTTYPE_FLAT_RTFD",
                "Ti.App.iOS.UTTYPE_TXN_TEXT_AND_MULTIMEDIA_DATA",
                "Ti.App.iOS.UTTYPE_WEB_ARCHIVE",
                "Ti.App.iOS.UTTYPE_IMAGE",
                "Ti.App.iOS.UTTYPE_JPEG",
                "Ti.App.iOS.UTTYPE_JPEG2000",
                "Ti.App.iOS.UTTYPE_TIFF",
                "Ti.App.iOS.UTTYPE_PICT",
                "Ti.App.iOS.UTTYPE_GIF",
                "Ti.App.iOS.UTTYPE_PNG",
                "Ti.App.iOS.UTTYPE_QUICKTIME_IMAGE",
                "Ti.App.iOS.UTTYPE_APPLE_ICNS",
                "Ti.App.iOS.UTTYPE_BMP",
                "Ti.App.iOS.UTTYPE_ICO",
                "Ti.App.iOS.UTTYPE_MOVIE",
                "Ti.App.iOS.UTTYPE_VIDEO",
                "Ti.App.iOS.UTTYPE_AUDIO",
                "Ti.App.iOS.UTTYPE_QUICKTIME_MOVIE",
                "Ti.App.iOS.UTTYPE_MPEG",
                "Ti.App.iOS.UTTYPE_MPEG4",
                "Ti.App.iOS.UTTYPE_MP3",
                "Ti.App.iOS.UTTYPE_MPEG4_AUDIO",
                "Ti.App.iOS.UTTYPE_APPLE_PROTECTED_MPEG4_AUDIO"
            ],
            "description": "<p>Content type of the attribute set.</p>"
        },
        "displayName": {
            "values": [],
            "description": "<p>A localized string to be displayed in the UI for this item.</p>"
        },
        "alternateNames": {
            "values": [],
            "description": "<p>An array of localized strings of alternate display names for this item.</p>"
        },
        "path": {
            "values": [],
            "description": "<p>The complete path to the item.</p>"
        },
        "contentURL": {
            "values": [],
            "description": "<p>File URL representing the content to be indexed.</p>"
        },
        "thumbnailURL": {
            "values": [],
            "description": "<p>File URL pointing to a thumbnail image for this item.</p>"
        },
        "thumbnailData": {
            "values": [],
            "description": "<p>Image data for thumbnail for this item.</p>"
        },
        "relatedUniqueIdentifier": {
            "values": [],
            "description": "<p>For activities this is the unique identifier for the item this activity is related to.</p>"
        },
        "metadataModificationDate": {
            "values": [],
            "description": "<p>The date that the last metadata attribute was changed.</p>"
        },
        "contentType": {
            "values": [],
            "description": "<p>UTI Type pedigree for an item.</p>"
        },
        "contentTypeTree": {
            "values": [],
            "description": "<p>Array of strings related to the content tree of the item.</p>"
        },
        "keywords": {
            "values": [],
            "description": "<p>Represents keywords associated with this particular item. Example keywords might be Birthday etc.</p>"
        },
        "subject": {
            "values": [],
            "description": "<p>Subject of the the item.</p>"
        },
        "theme": {
            "values": [],
            "description": "<p>Theme of the the item.</p>"
        },
        "contentDescription": {
            "values": [],
            "description": "<p>An account of the content of the resource.</p>"
        },
        "identifier": {
            "values": [],
            "description": "<p>Used to reference to the resource within a given context.</p>"
        },
        "audiences": {
            "values": [],
            "description": "<p>A class of entity for whom the resource is intended or useful.</p>"
        },
        "fileSize": {
            "values": [],
            "description": "<p>Size of the document in MB.</p>"
        },
        "pageCount": {
            "values": [],
            "description": "<p>Number of pages in the item.</p>"
        },
        "pageWidth": {
            "values": [],
            "description": "<p>Width in points (72 points per inch) of the document page.</p>"
        },
        "pageHeight": {
            "values": [],
            "description": "<p>Height in points (72 points per inch) of the document page.</p>"
        },
        "securityMethod": {
            "values": [],
            "description": "<p>Security (encryption) method used in the file.</p>"
        },
        "creator": {
            "values": [],
            "description": "<p>Application used to create the document content (e.g. \"Word\",\"Framemaker\", etc.).</p>"
        },
        "encodingApplications": {
            "values": [],
            "description": "<p>Software used to convert the original content into a PDF stream.</p>"
        },
        "kind": {
            "values": [
                "Ti.Contacts.CONTACTS_KIND_ORGANIZATION",
                "Ti.Contacts.CONTACTS_KIND_PERSON"
            ],
            "description": "<p>Kind that the item represents.</p>"
        },
        "fontNames": {
            "values": [],
            "description": "<p>Array of font names used in the item.</p>"
        },
        "audioSampleRate": {
            "values": [],
            "description": "<p>The sample rate of the audio data contained in the file.</p>"
        },
        "audioChannelCount": {
            "values": [],
            "description": "<p>The number of channels in the audio data contained in the file.</p>"
        },
        "tempo": {
            "values": [],
            "description": "<p>The tempo of the music contained in the audio file in Beats Per Minute.</p>"
        },
        "keySignature": {
            "values": [],
            "description": "<p>The musical key of the song/composition contained in an audio file.</p>"
        },
        "timeSignature": {
            "values": [],
            "description": "<p>The time signature of the musical composition contained in the audio/MIDI file.</p>"
        },
        "audioEncodingApplication": {
            "values": [],
            "description": "<p>The name of the application that encoded the data contained in the audio file.</p>"
        },
        "composer": {
            "values": [],
            "description": "<p>The composer of the song/composition contained in the audio file.</p>"
        },
        "lyricist": {
            "values": [],
            "description": "<p>The lyricist/text writer for song/composition contained in the audio file.</p>"
        },
        "album": {
            "values": [],
            "description": "<p>The title for a collection of media.</p>"
        },
        "artist": {
            "values": [],
            "description": "<p>The artist for the media.</p>"
        },
        "audioTrackNumber": {
            "values": [],
            "description": "<p>The track number of a song/composition when it is part of an album.</p>"
        },
        "recordingDate": {
            "values": [],
            "description": "<p>The recording date of the song/composition.</p>"
        },
        "musicalGenre": {
            "values": [],
            "description": "<p>The musical genre of the song/composition contained in the audio file.</p>"
        },
        "generalMIDISequence": {
            "values": [],
            "description": "<p>Used to indicates whether the MIDI sequence contained in the file is setup for use with a General MIDI device.</p>"
        },
        "musicalInstrumentCategory": {
            "values": [],
            "description": "<p>Metadata attribute that stores the category of instrument.</p>"
        },
        "musicalInstrumentName": {
            "values": [],
            "description": "<p>Metadata attribute that stores the name of instrument.</p>"
        },
        "supportsPhoneCall": {
            "values": [],
            "description": "<p>Used to indicate that using the phone number is appropriate.</p>"
        },
        "supportsNavigation": {
            "values": [],
            "description": "<p>Used to determine if navigation is supported.</p>"
        },
        "containerTitle": {
            "values": [],
            "description": "<p>Title displayed in the search container</p>"
        },
        "containerDisplayName": {
            "values": [],
            "description": "<p>Display of the search container</p>"
        },
        "containerIdentifier": {
            "values": [],
            "description": "<p>Identifier for the search container</p>"
        },
        "containerOrder": {
            "values": [],
            "description": "<p>Order the search container is displayed.</p>"
        },
        "editors": {
            "values": [],
            "description": "<p>The list of editor/editors that have worked on this item.</p>"
        },
        "participants": {
            "values": [],
            "description": "<p>The list of people who are visible in an image or movie or written about in a document.</p>"
        },
        "projects": {
            "values": [],
            "description": "<p>The list of projects that this item is part of.</p>"
        },
        "downloadedDate": {
            "values": [],
            "description": "<p>The date that the file was last downloaded / received.</p>"
        },
        "lastUsedDate": {
            "values": [],
            "description": "<p>The date that the item was last used.</p>"
        },
        "contentCreationDate": {
            "values": [],
            "description": "<p>The date that the contents of the item were created.</p>"
        },
        "contentModificationDate": {
            "values": [],
            "description": "<p>The date that the contents of the item were last modified.</p>"
        },
        "addedDate": {
            "values": [],
            "description": "<p>The date that the item was moved into the current location.</p>"
        },
        "contentSources": {
            "values": [],
            "description": "<p>Used to indicate where the item was obtained from.</p>"
        },
        "comment": {
            "values": [],
            "description": "<p>Comment related to a file.</p>"
        },
        "copyright": {
            "values": [],
            "description": "<p>Copyright of the content.</p>"
        },
        "duration": {
            "values": [
                "Ti.UI.NOTIFICATION_DURATION_LONG",
                "Ti.UI.NOTIFICATION_DURATION_SHORT"
            ],
            "description": "<p>Duration in seconds of the content of the item (if appropriate).</p>"
        },
        "contactKeywords": {
            "values": [],
            "description": "<p>A list of contacts that are somehow associated with this document beyond what is captured as Author.</p>"
        },
        "codecs": {
            "values": [],
            "description": "<p>The codecs used to encode/decode the media.</p>"
        },
        "organizations": {
            "values": [],
            "description": "<p>Used to indicate company/Organization that created the document.</p>"
        },
        "mediaTypes": {
            "values": [
                "Ti.Media.MUSIC_MEDIA_TYPE_ALL",
                "Ti.Media.MUSIC_MEDIA_TYPE_ANY_AUDIO",
                "Ti.Media.MUSIC_MEDIA_TYPE_AUDIOBOOK",
                "Ti.Media.MUSIC_MEDIA_TYPE_MUSIC",
                "Ti.Media.MUSIC_MEDIA_TYPE_PODCAST",
                "Ti.Media.MEDIA_TYPE_PHOTO",
                "Ti.Media.MEDIA_TYPE_VIDEO",
                "Ti.Media.VIDEO_MEDIA_TYPE_AUDIO",
                "Ti.Media.VIDEO_MEDIA_TYPE_NONE",
                "Ti.Media.VIDEO_MEDIA_TYPE_VIDEO"
            ],
            "description": "<p>Media types present in the content.</p>"
        },
        "version": {
            "values": [],
            "description": "<p>A version specifier for this item.</p>"
        },
        "role": {
            "values": [],
            "description": "<p>Used to indicate the role of the document creator.</p>"
        },
        "streamable": {
            "values": [],
            "description": "<p>Whether the content is prepared for streaming.  Set to <code>0</code> for not streamable and <code>1</code> for streamable.</p>"
        },
        "totalBitRate": {
            "values": [],
            "description": "<p>The total bit rate (audio and video combined) of the media.</p>"
        },
        "videoBitRate": {
            "values": [],
            "description": "<p>The video bit rate.</p>"
        },
        "audioBitRate": {
            "values": [],
            "description": "<p>The audio bit rate.</p>"
        },
        "deliveryType": {
            "values": [],
            "description": "<p>The delivery type of the item.  Set to <code>0</code> for fast start and <code>1</code> for RTSP.</p>"
        },
        "languages": {
            "values": [],
            "description": "<p>Used to designate the languages of the intellectual content of the resource.</p>"
        },
        "rights": {
            "values": [],
            "description": "<p>Used to provide a link to information about rights held in and over resource.</p>"
        },
        "publishers": {
            "values": [],
            "description": "<p>Used to designate the entity responsible for making the resource available.</p>"
        },
        "contributors": {
            "values": [],
            "description": "<p>Used to designate the entity responsible for making contributions to the content of the resource.</p>"
        },
        "coverage": {
            "values": [],
            "description": "<p>Used to designate the extent or scope of the content of the resource.</p>"
        },
        "rating": {
            "values": [],
            "description": "<p>User rating of this item out of 5 stars.</p>"
        },
        "ratingDescription": {
            "values": [],
            "description": "<p>A description of the rating, for example, the number of reviewers.</p>"
        },
        "playCount": {
            "values": [],
            "description": "<p>User play count of this item.</p>"
        },
        "information": {
            "values": [],
            "description": "<p>Information about the item.</p>"
        },
        "director": {
            "values": [],
            "description": "<p>Director of the item, for example, the movie director.</p>"
        },
        "producer": {
            "values": [],
            "description": "<p>Producer of the content.</p>"
        },
        "genre": {
            "values": [],
            "description": "<p>Genre of the item, for example, movie genre.</p>"
        },
        "performers": {
            "values": [],
            "description": "<p>Performers in the movie.</p>"
        },
        "originalFormat": {
            "values": [],
            "description": "<p>Original format of the movie.</p>"
        },
        "originalSource": {
            "values": [],
            "description": "<p>Original source of the movie.</p>"
        },
        "local": {
            "values": [],
            "description": "<p>Whether or not the item is local. Set to <code>1</code> if true and <code>0</code> otherwise.</p>"
        },
        "contentRating": {
            "values": [],
            "description": "<p>Whether or not the item has explicit content. Set to <code>1</code> for explicit or <code>0</code> for clean.</p>"
        },
        "activityType": {
            "values": [
                "Ti.Geolocation.ACTIVITYTYPE_AUTOMOTIVE_NAVIGATION",
                "Ti.Geolocation.ACTIVITYTYPE_FITNESS",
                "Ti.Geolocation.ACTIVITYTYPE_OTHER",
                "Ti.Geolocation.ACTIVITYTYPE_OTHER_NAVIGATION"
            ],
            "description": "<p>Name of the activity type.</p>"
        },
        "eligibleForPublicIndexing": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Set to <code>true</code> if the user activity can be publicly accessed by all iOS users.</p>"
        },
        "eligibleForSearch": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Set to true if the user activity should be added to the on-device index.</p>"
        },
        "eligibleForHandoff": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Set to true if this user activity should be eligible to be handed off to another device</p>"
        },
        "needsSave": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines if iOS should fire the <code>useractivitywillsave</code> event for the application to update\nthe state or content of the user activity.</p>"
        },
        "requiredUserInfoKeys": {
            "values": [],
            "description": "<p>An array of String keys from the userInfo property which represent the minimal information about the user activity that should be stored for later restoration.</p>"
        },
        "supported": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines if user activities are supported (<code>true</code>) or not (<code>false</code>) by the device.</p>"
        },
        "userInfo": {
            "values": [],
            "description": "<p>The userInfo dictionary contains application-specific state needed to continue an activity on another device.</p>"
        },
        "webpageURL": {
            "values": [],
            "description": "<p>When no suitable application is installed on a resuming device and the <code>webpageURL</code> property is set,\nthe user activity will instead be continued in a web browser by loading the specified URL.</p>"
        },
        "suiteName": {
            "values": [],
            "description": "<p>Sets the name of the suite to be used to access UserDefaults.</p>"
        },
        "activationMode": {
            "values": [
                "Ti.App.iOS.USER_NOTIFICATION_ACTIVATION_MODE_BACKGROUND",
                "Ti.App.iOS.USER_NOTIFICATION_ACTIVATION_MODE_FOREGROUND"
            ],
            "description": "<p>Selects how to activate the application.</p>"
        },
        "authenticationRequired": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Set to true if the action requires the device to be unlocked.</p>"
        },
        "destructive": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Set to true if the action causes destructive behavior to the user's data or the application.</p>"
        },
        "actionsForDefaultContext": {
            "values": [],
            "description": "<p>Array of notification actions to associate with the group.</p>"
        },
        "actionsForMinimalContext": {
            "values": [],
            "description": "<p>Array of notification actions to display for non-dialog-style notification.</p>"
        },
        "alertAction": {
            "values": [],
            "description": "<p>Alert button text ('Open', by default) or slider text ('slide to unlock...', by default)\nto display.</p>"
        },
        "alertBody": {
            "values": [],
            "description": "<p>Alert message to display.</p>"
        },
        "alertLaunchImage": {
            "values": [],
            "description": "<p>Image to display instead of <code>Default.png</code> when launching the application.</p>"
        },
        "badge": {
            "values": [],
            "description": "<p>Application badge value.</p>"
        },
        "date": {
            "values": [],
            "description": "<p>Date and time for the notification to occur.</p>"
        },
        "repeat": {
            "values": [],
            "description": "<p>Interval to repeat the notification. One of <code>weekly</code>, <code>daily</code>, <code>yearly,</code> <code>monthly</code>.</p>"
        },
        "timezone": {
            "values": [],
            "description": "<p>Timezone of the date configured for the notification. If not set, the system timezone is used.</p>"
        },
        "types": {
            "values": [
                "Ti.App.iOS.USER_NOTIFICATION_TYPE_NONE",
                "Ti.App.iOS.USER_NOTIFICATION_TYPE_BADGE",
                "Ti.App.iOS.USER_NOTIFICATION_TYPE_SOUND",
                "Ti.App.iOS.USER_NOTIFICATION_TYPE_ALERT",
                "Ti.Network.NOTIFICATION_TYPE_ALERT",
                "Ti.Network.NOTIFICATION_TYPE_BADGE",
                "Ti.Network.NOTIFICATION_TYPE_SOUND",
                "Ti.Network.NOTIFICATION_TYPE_NEWSSTAND"
            ],
            "description": "<p>Notification types to use.</p>"
        },
        "categories": {
            "values": [],
            "description": "<p>Set of categories of user notification actions required by the applicaiton to use.</p>"
        },
        "x": {
            "values": [],
            "description": "<p>Left coordinate of the cropped rectangle within the source image.</p>"
        },
        "y": {
            "values": [],
            "description": "<p>Top coordinate of the cropped rectangle within the source image.</p>"
        },
        "length": {
            "values": [],
            "description": "<p>Length of the buffer in bytes.</p>"
        },
        "value": {
            "values": [
                "true",
                "false",
                "Ti.UI.iOS.ATTRIBUTE_UNDERLINE_STYLE_NONE",
                "Ti.UI.iOS.ATTRIBUTE_UNDERLINE_STYLE_SINGLE",
                "Ti.UI.iOS.ATTRIBUTE_UNDERLINE_STYLE_THICK",
                "Ti.UI.iOS.ATTRIBUTE_UNDERLINE_STYLE_DOUBLE",
                "Ti.UI.iOS.ATTRIBUTE_WRITING_DIRECTION_EMBEDDING",
                "Ti.UI.iOS.ATTRIBUTE_WRITING_DIRECTION_OVERRIDE",
                "Ti.UI.iOS.ATTRIBUTE_WRITING_DIRECTION_NATURAL",
                "Ti.UI.iOS.ATTRIBUTE_WRITING_DIRECTION_LEFT_TO_RIGHT",
                "Ti.UI.iOS.ATTRIBUTE_WRITING_DIRECTION_RIGHT_TO_LEFT",
                "Ti.UI.iOS.ATTRIBUTE_LETTERPRESS_STYLE"
            ],
            "description": "<p>Data to be encoded.</p>"
        },
        "type": {
            "values": [
                "Ti.Codec.TYPE_BYTE",
                "Ti.Codec.TYPE_SHORT",
                "Ti.Codec.TYPE_INT",
                "Ti.Codec.TYPE_FLOAT",
                "Ti.Codec.TYPE_LONG",
                "Ti.Codec.TYPE_DOUBLE",
                "Ti.UI.Android.PROGRESS_INDICATOR_INDETERMINANT",
                "Ti.UI.Android.PROGRESS_INDICATOR_DETERMINANT",
                "Ti.UI.ATTRIBUTE_FONT",
                "Ti.UI.ATTRIBUTE_FOREGROUND_COLOR",
                "Ti.UI.ATTRIBUTE_BACKGROUND_COLOR",
                "Ti.UI.ATTRIBUTE_STRIKETHROUGH_STYLE",
                "Ti.UI.ATTRIBUTE_UNDERLINES_STYLE",
                "Ti.UI.ATTRIBUTE_LINK",
                "Ti.UI.ATTRIBUTE_UNDERLINE_COLOR",
                "Ti.UI.iOS.ATTRIBUTE_LIGATURE",
                "Ti.UI.ATTRIBUTE_KERN",
                "Ti.UI.ATTRIBUTE_STROKE_COLOR",
                "Ti.UI.ATTRIBUTE_STROKE_WIDTH",
                "Ti.UI.ATTRIBUTE_SHADOW",
                "Ti.UI.ATTRIBUTE_WRITING_DIRECTION",
                "Ti.UI.ATTRIBUTE_TEXT_EFFECT",
                "Ti.UI.ATTRIBUTE_BASELINE_OFFSET",
                "Ti.UI.ATTRIBUTE_STRIKETHROUGH_COLOR",
                "Ti.UI.ATTRIBUTE_OBLIQUENESS",
                "Ti.UI.ATTRIBUTE_EXPANSION",
                "Ti.UI.ATTRIBUTE_LINE_BREAK",
                "Ti.UI.PICKER_TYPE_COUNT_DOWN_TIMER",
                "Ti.UI.PICKER_TYPE_DATE",
                "Ti.UI.PICKER_TYPE_DATE_AND_TIME",
                "Ti.UI.PICKER_TYPE_PLAIN",
                "Ti.UI.PICKER_TYPE_TIME",
                "Ti.UI.iOS.ATTRIBUTE_FONT",
                "Ti.UI.iOS.ATTRIBUTE_FOREGROUND_COLOR",
                "Ti.UI.iOS.ATTRIBUTE_BACKGROUND_COLOR",
                "Ti.UI.iOS.ATTRIBUTE_LIGATURE",
                "Ti.UI.iOS.ATTRIBUTE_KERN",
                "Ti.UI.iOS.ATTRIBUTE_STRIKETHROUGH_STYLE",
                "Ti.UI.iOS.ATTRIBUTE_UNDERLINES_STYLE",
                "Ti.UI.iOS.ATTRIBUTE_STROKE_COLOR",
                "Ti.UI.iOS.ATTRIBUTE_STROKE_WIDTH",
                "Ti.UI.iOS.ATTRIBUTE_SHADOW",
                "Ti.UI.iOS.ATTRIBUTE_WRITING_DIRECTION",
                "Ti.UI.iOS.ATTRIBUTE_TEXT_EFFECT",
                "Ti.UI.iOS.ATTRIBUTE_LINK",
                "Ti.UI.iOS.ATTRIBUTE_BASELINE_OFFSET",
                "Ti.UI.iOS.ATTRIBUTE_UNDERLINE_COLOR",
                "Ti.UI.iOS.ATTRIBUTE_STRIKETHROUGH_COLOR",
                "Ti.UI.iOS.ATTRIBUTE_OBLIQUENESS",
                "Ti.UI.iOS.ATTRIBUTE_EXPANSION"
            ],
            "description": "<p>The type of data encoding to use with <code>value</code>.</p>"
        },
        "byteOrder": {
            "values": [],
            "description": "<p>Byte order of this buffer.</p>"
        },
        "absoluteDate": {
            "values": [],
            "description": "<p>The absolute date for the alarm.</p>"
        },
        "relativeOffset": {
            "values": [],
            "description": "<p>The offset from the start of an event, at which the alarm fires.</p>"
        },
        "alerts": {
            "values": [],
            "description": "<p>Alarms associated with the calendar item, as an array of <a href=\"Titanium.Calendar.Alert\">Alert</a> objects.</p>"
        },
        "allDay": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Indicates whether this event is all day.</p>"
        },
        "begin": {
            "values": [],
            "description": "<p>Start date/time of this event.</p>"
        },
        "notes": {
            "values": [],
            "description": "<p>Notes for this event.</p>"
        },
        "end": {
            "values": [],
            "description": "<p>End date/time of this event.</p>"
        },
        "recurrenceRule": {
            "values": [],
            "description": "<p>Recurrence rule associated with the event. (Available in iOS 4.0 through iOS 5.1.) <strong>Removed in 3.2.0.</strong></p>"
        },
        "recurrenceRules": {
            "values": [],
            "description": "<p>The recurrence rules for the calendar item. (Available in iOS 5.1 and above.)</p>"
        },
        "daysOfWeek": {
            "values": [],
            "description": "<p>The day of the week. Values are from 1 to 7, with Sunday being 1.</p>"
        },
        "week": {
            "values": [],
            "description": "<p>The week number of the day of the week.\nValues range from -53 to 53. A negative value indicates a value from the end of \nthe range. 0 indicates the week number is irrelevant.</p>"
        },
        "endDate": {
            "values": [],
            "description": "<p>End date of the recurrence end, or undefined if the recurrence end is count-based.</p>"
        },
        "occurrenceCount": {
            "values": [],
            "description": "<p>Occurrence count of the recurrence end, or 0 if the recurrence end is date-based.</p>"
        },
        "dest": {
            "values": [],
            "description": "<p>Destination buffer.</p>"
        },
        "position": {
            "values": [
                "Ti.UI.iPhone.ListViewScrollPosition.BOTTOM",
                "Ti.UI.iPhone.ListViewScrollPosition.MIDDLE",
                "Ti.UI.iPhone.ListViewScrollPosition.NONE",
                "Ti.UI.iPhone.ListViewScrollPosition.TOP",
                "Ti.UI.iPhone.TableViewScrollPosition.BOTTOM",
                "Ti.UI.iPhone.TableViewScrollPosition.MIDDLE",
                "Ti.UI.iPhone.TableViewScrollPosition.NONE",
                "Ti.UI.iPhone.TableViewScrollPosition.TOP"
            ],
            "description": "<p>Index in the <code>dest</code> buffer of the first byte of encoded data.</p>"
        },
        "destPosition": {
            "values": [],
            "description": "<p>Index in the <code>dest</code> buffer of the first byte of the encoded string.</p>"
        },
        "sourcePosition": {
            "values": [],
            "description": "<p>Position in <code>source</code> to start encoding.</p>"
        },
        "sourceLength": {
            "values": [],
            "description": "<p>Number of characters in <code>source</code> to encode.</p>"
        },
        "charset": {
            "values": [
                "Ti.Codec.CHARSET_ASCII",
                "Ti.Codec.CHARSET_ISO_LATIN_1",
                "Ti.Codec.CHARSET_UTF8",
                "Ti.Codec.CHARSET_UTF16",
                "Ti.Codec.CHARSET_UTF16BE",
                "Ti.Codec.CHARSET_UTF16LE",
                "Ti.Codec.CHARSET_ASCII",
                "Ti.Codec.CHARSET_ISO_LATIN_1",
                "Ti.Codec.CHARSET_UTF8",
                "Ti.Codec.CHARSET_UTF16",
                "Ti.Codec.CHARSET_UTF16BE",
                "Ti.Codec.CHARSET_UTF16LE"
            ],
            "description": "<p>Character encoding to use when encoding this string to bytes.</p>"
        },
        "animated": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines whether to animate the show/hide of the contacts picker (iPhone, iPad only.)</p>"
        },
        "fields": {
            "values": [],
            "description": "<p>Field names to show when selecting properties. By default, shows all available.</p>"
        },
        "cancel": {
            "values": [],
            "description": "<p>Function to call when selection is canceled.</p>"
        },
        "selectedPerson": {
            "values": [],
            "description": "<p>Function to call when a person is selected. Must not be used with <code>selectedProperty</code> property.</p>"
        },
        "selectedProperty": {
            "values": [],
            "description": "<p>Function to call when a property is selected. Must not be used with <code>selectedPerson</code> \nproperty.\nNote: If ringtone or texttone is selected, null values are returned, since these are unsupported\nby Apple.</p>"
        },
        "name": {
            "values": [],
            "description": "<p>Name of this group.</p>"
        },
        "recordId": {
            "values": [],
            "description": "<p>Record identifier of the group. Single value. Deprecated for >= iOS9.</p>"
        },
        "address": {
            "values": [],
            "description": "<p>Addresses for the person. Multi-value. Read-only on Android.</p>"
        },
        "birthday": {
            "values": [],
            "description": "<p>Date of birth of the person. Single value.</p>"
        },
        "alternateBirthday": {
            "values": [],
            "description": "<p>Alternate birthday of the person. Single Dictionary.</p>"
        },
        "department": {
            "values": [],
            "description": "<p>Department of the person. Single value.</p>"
        },
        "email": {
            "values": [],
            "description": "<p>Email addresses for the person. Multi-value. Read-only on Android.</p>"
        },
        "firstName": {
            "values": [],
            "description": "<p>First name of the person. Single value.</p>"
        },
        "firstPhonetic": {
            "values": [],
            "description": "<p>Phonetic first name of the person.  Single value.</p>"
        },
        "image": {
            "values": [],
            "description": "<p>Image for the person. Single value. Read-only for >= iOS9</p>"
        },
        "instantMessage": {
            "values": [],
            "description": "<p>Instant messenger information of the person. Multi-value.</p>"
        },
        "socialProfile": {
            "values": [],
            "description": "<p>Social profile information of the person. Multi-value.</p>"
        },
        "jobTitle": {
            "values": [],
            "description": "<p>Job title of the person. Single value.</p>"
        },
        "lastName": {
            "values": [],
            "description": "<p>Last name of the person. Single value.</p>"
        },
        "lastPhonetic": {
            "values": [],
            "description": "<p>Phonetic last name of the person. Single value.</p>"
        },
        "middleName": {
            "values": [],
            "description": "<p>Middle name of the person. Single value.</p>"
        },
        "middlePhonetic": {
            "values": [],
            "description": "<p>Phonetic middle name of the person. Single value.</p>"
        },
        "nickname": {
            "values": [],
            "description": "<p>Nickname of the person. Single value.</p>"
        },
        "note": {
            "values": [],
            "description": "<p>Notes for the person. Single value.</p>"
        },
        "organization": {
            "values": [],
            "description": "<p>Organization to which the person belongs. Single value.</p>"
        },
        "phone": {
            "values": [],
            "description": "<p>Phone numbers for the person. Multi-value. Read-only on Android.</p>"
        },
        "relatedNames": {
            "values": [],
            "description": "<p>Names of people to which the person is related. Multi-value.</p>"
        },
        "lastInsertRowId": {
            "values": [],
            "description": "<p>The identifier of the last populated row.</p>"
        },
        "rowsAffected": {
            "values": [],
            "description": "<p>The number of rows affected by the last query.</p>"
        },
        "cancelBubble": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Set to true to stop the event from bubbling.</p>"
        },
        "appid": {
            "values": [],
            "description": "<p>Your Facebook application id. You need to set this for anything to work.</p>"
        },
        "forceDialogAuth": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Indicates whether the login should use the traditional dialog-based\nauthentication.</p>"
        },
        "loggedIn": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Indicates if the user is logged in.</p>"
        },
        "permissions": {
            "values": [],
            "description": "<p>Array of permissions to request for your app.</p>"
        },
        "uid": {
            "values": [],
            "description": "<p>Unique user ID returned from Facebook.</p>"
        },
        "result": {
            "values": [],
            "description": "<p>JSON response returned by Facebook.</p>"
        },
        "cancelled": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Indicates if the user canceled the dialog.</p>"
        },
        "method": {
            "values": [],
            "description": "<p>REST method call you specified.</p>"
        },
        "style": {
            "values": [
                "Ti.UI.iPhone.ActivityIndicatorStyle.BIG",
                "Ti.UI.iPhone.ActivityIndicatorStyle.DARK",
                "Ti.UI.iPhone.ActivityIndicatorStyle.PLAIN",
                "Ti.UI.ActivityIndicatorStyle.BIG",
                "Ti.UI.ActivityIndicatorStyle.BIG_DARK",
                "Ti.UI.ActivityIndicatorStyle.DARK",
                "Ti.UI.ActivityIndicatorStyle.PLAIN",
                "Ti.UI.iPhone.SystemButtonStyle.BAR",
                "Ti.UI.iPhone.SystemButtonStyle.BORDERED",
                "Ti.UI.iPhone.SystemButtonStyle.DONE",
                "Ti.UI.iPhone.SystemButtonStyle.PLAIN",
                "Ti.UI.iPhone.ListViewStyle.GROUPED",
                "Ti.UI.iPhone.ListViewStyle.PLAIN",
                "Ti.UI.Android.SWITCH_STYLE_CHECKBOX",
                "Ti.UI.Android.SWITCH_STYLE_TOGGLEBUTTON",
                "Ti.UI.Android.SWITCH_STYLE_SWITCH",
                "Ti.UI.iPhone.TableViewStyle.GROUPED",
                "Ti.UI.iPhone.TableViewStyle.PLAIN",
                "Ti.UI.iPhone.SystemButtonStyle.BAR",
                "Ti.UI.iPhone.SystemButtonStyle.BORDERED",
                "Ti.UI.iPhone.SystemButtonStyle.DONE",
                "Ti.UI.iPhone.SystemButtonStyle.PLAIN"
            ],
            "description": "<p>Sets the login button style.</p>"
        },
        "hidden": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Set to <code>true</code> if the file is hidden.</p>"
        },
        "remoteBackup": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Value indicating whether or not to back up to a cloud service.</p>"
        },
        "manualMode": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Set to <code>true</code> to enable manual configuration of location updates through this module.</p>"
        },
        "minUpdateTime": {
            "values": [],
            "description": "<p>Limits the frequency of location updates to no more than one per <code>minUpdateTime</code> seconds.</p>"
        },
        "minUpdateDistance": {
            "values": [],
            "description": "<p>Don't send a location update unless the location has changed at least <code>minUpdateDistance</code> \nmeters since the previous update.</p>"
        },
        "accuracy": {
            "values": [
                "Ti.Geolocation.ACCURACY_BEST",
                "Ti.Geolocation.ACCURACY_BEST_FOR_NAVIGATION",
                "Ti.Geolocation.ACCURACY_HUNDRED_METERS",
                "Ti.Geolocation.ACCURACY_KILOMETER",
                "Ti.Geolocation.ACCURACY_NEAREST_TEN_METERS",
                "Ti.Geolocation.ACCURACY_THREE_KILOMETERS",
                "Ti.Geolocation.ACCURACY_HIGH",
                "Ti.Geolocation.ACCURACY_LOW"
            ],
            "description": "<p>Minimum accuracy required for a location update.</p>"
        },
        "minAge": {
            "values": [],
            "description": "<p>Controls the frequency of location updates.</p>"
        },
        "maxAge": {
            "values": [],
            "description": "<p>Controls the freshness of location updates. Do not forward an update\nunless it is newer than <code>maxAge</code> milliseconds.</p>"
        },
        "frequency": {
            "values": [],
            "description": "<p>Requested frequency for location updates, in milliseconds. <strong>Deprecated since 2.0.0. Android legacy mode operation is deprecated. For new development, use\neither simple mode or manual mode. See \"Configurating Location Updates on Android\"\nin the main description of this class for more information.</strong></p>"
        },
        "preferredProvider": {
            "values": [
                "Ti.Geolocation.PROVIDER_GPS",
                "Ti.Geolocation.PROVIDER_NETWORK",
                "Ti.Geolocation.PROVIDER_PASSIVE"
            ],
            "description": "<p>Determines the preferred location provider.\n <strong>Deprecated since 2.0.0. Android legacy mode operation is deprecated. For new development, use\neither simple mode or manual mode. See \"Configurating Location Updates on Android\"\nin the main description of this class for more information.</strong></p>"
        },
        "purpose": {
            "values": [],
            "description": "<p>Text to display in the permission dialog when requesting location\nservices.</p>"
        },
        "showCalibration": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines whether the compass calibration UI is shown if needed.</p>"
        },
        "trackSignificantLocationChange": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Indicates if the location changes should be updated only when a significant change \nin location occurs.</p>"
        },
        "allowsBackgroundLocationUpdates": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines if the app can do background location updates.</p>"
        },
        "pauseLocationUpdateAutomatically": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Indicates whether the location updates may be paused. Available in iOS 6.0 and later.</p>"
        },
        "distanceFilter": {
            "values": [],
            "description": "<p>The minimum change of position (in meters) before a 'location' event is fired.</p>"
        },
        "headingFilter": {
            "values": [],
            "description": "<p>Minimum heading change (in degrees) before a <code>heading</code> event is fired.</p>"
        },
        "locationServicesAuthorization": {
            "values": [
                "Ti.Geolocation.AUTHORIZATION_ALWAYS",
                "Ti.Geolocation.AUTHORIZATION_AUTHORIZED",
                "Ti.Geolocation.AUTHORIZATION_DENIED",
                "Ti.Geolocation.AUTHORIZATION_RESTRICTED",
                "Ti.Geolocation.AUTHORIZATION_UNKNOWN",
                "Ti.Geolocation.AUTHORIZATION_WHEN_IN_USE"
            ],
            "description": "<p>Returns an authorization constant indicating if the application has access to location services.</p>"
        },
        "provider": {
            "values": [],
            "description": "<p>If <code>success</code> is true, object describing the location provider generating this update.</p>"
        },
        "coords": {
            "values": [],
            "description": "<p>If <code>success</code> is true, actual location data for this update.</p>"
        },
        "latitude": {
            "values": [],
            "description": "<p>Latitude of the location update, in decimal degrees.</p>"
        },
        "longitude": {
            "values": [],
            "description": "<p>Longitude of the location update, in decimal degrees.</p>"
        },
        "altitude": {
            "values": [],
            "description": "<p>Altitude of the location update, in meters.</p>"
        },
        "altitudeAccuracy": {
            "values": [],
            "description": "<p>Vertical accuracy of the location update, in meters.</p>"
        },
        "heading": {
            "values": [],
            "description": "<p>Compass heading, in degrees. May be unknown if device is not moving. On \niOS, a negative value indicates that the heading data is not valid.</p>"
        },
        "speed": {
            "values": [],
            "description": "<p>Current speed in meters/second. On iOS, a negative value indicates that the \nheading data is not valid.</p>"
        },
        "timestamp": {
            "values": [],
            "description": "<p>Timestamp for this location update, in milliseconds.</p>"
        },
        "floor": {
            "values": [],
            "description": "<p>The floor of the building on which the user is located. Available in iOS 8.0 and later.</p>"
        },
        "level": {
            "values": [],
            "description": "<p>The logical floor of the building.</p>"
        },
        "street": {
            "values": [],
            "description": "<p>Street name, without street address.</p>"
        },
        "street1": {
            "values": [],
            "description": "<p>Street name.</p>"
        },
        "city": {
            "values": [],
            "description": "<p>City name.</p>"
        },
        "region1": {
            "values": [],
            "description": "<p>First line of region.</p>"
        },
        "region2": {
            "values": [],
            "description": "<p>Not used.</p>"
        },
        "postalCode": {
            "values": [],
            "description": "<p>Postal code.</p>"
        },
        "country": {
            "values": [],
            "description": "<p>Country name.</p>"
        },
        "countryCode": {
            "values": [],
            "description": "<p>Country code.</p>"
        },
        "country_code": {
            "values": [],
            "description": "<p>Country code. Same as <code>countryCode</code>.</p>"
        },
        "displayAddress": {
            "values": [],
            "description": "<p>Display address. Identical to <code>address</code>.</p>"
        },
        "magneticHeading": {
            "values": [],
            "description": "<p>Declination in degrees from magnetic North.</p>"
        },
        "trueHeading": {
            "values": [],
            "description": "<p>Declination in degrees from true North.</p>"
        },
        "z": {
            "values": [],
            "description": "<p>Raw geomagnetic data for the Z axis.</p>"
        },
        "power": {
            "values": [],
            "description": "<p>Power consumption for this provider, either low (1), medium (2), or high (3).</p>"
        },
        "zipcode": {
            "values": [],
            "description": "<p>Postal code. On Android, use <code>postalCode</code>.</p>"
        },
        "locationTimeout": {
            "values": [],
            "description": "<p>The time within which location requests must succeed, in milliseconds.</p>"
        },
        "maximumLocationAge": {
            "values": [],
            "description": "<p>The maximum age of cached locations acceptible for location requests, in milliseconds.</p>"
        },
        "maximumHeadingAge": {
            "values": [],
            "description": "<p>The maximum age of cached locations acceptible for heading requests, in milliseconds.</p>"
        },
        "forwardGeocoderTimeout": {
            "values": [],
            "description": "<p>The time within which forward geocoder requests must succeed, in milliseconds.</p>"
        },
        "reverseGeocoderTimeout": {
            "values": [],
            "description": "<p>The time within which reverse geocoder requests must succeed, in milliseconds.</p>"
        },
        "animate": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Boolean to indicate whether the pin should animate when dropped.</p>"
        },
        "pinImage": {
            "values": [],
            "description": "<p>Image for the pin instead of the default image. <strong>Deprecated since 1.4. Use <a href=\"Titanium.Map.Annotation.image\">image</a> property instead.</strong></p>"
        },
        "canShowCallout": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Defines whether the annotation view is able to display extra information in a callout bubble.</p>"
        },
        "centerOffset": {
            "values": [],
            "description": "<p>Defines a center offset point for the annotation.</p>"
        },
        "customView": {
            "values": [],
            "description": "<p>Defines a custom view to be used by the annotation.</p>"
        },
        "draggable": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines whether the pin can be dragged by the user.</p>"
        },
        "leftButton": {
            "values": [],
            "description": "<p>Left button image on the annotation, specified as an image URL or an iOS\nbutton constant.</p>"
        },
        "leftView": {
            "values": [],
            "description": "<p>Left view that is displayed on the annotation.</p>"
        },
        "pincolor": {
            "values": [],
            "description": "<p>Pin color. Specify one of: <a href=\"Titanium.Map.ANNOTATION_GREEN\">ANNOTATION_GREEN</a>, <a href=\"Titanium.Map.ANNOTATION_PURPLE\">ANNOTATION_PURPLE</a> \nor <a href=\"Titanium.Map.ANNOTATION_RED\">ANNOTATION_RED</a>.</p>"
        },
        "rightButton": {
            "values": [],
            "description": "<p>Right button image on the annotation, specified as an image URL or an iOS\nbutton constant.</p>"
        },
        "rightView": {
            "values": [],
            "description": "<p>Right view that is displayed on the annotation.</p>"
        },
        "subtitleid": {
            "values": [],
            "description": "<p>Key in the locale file to use for the subtitle property.</p>"
        },
        "titleid": {
            "values": [],
            "description": "<p>Key in the locale file to use for the title property.</p>"
        },
        "hideAnnotationWhenTouchMap": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Hide the annotation when clicking in the map view outside of the annotation.</p>"
        },
        "regionFit": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Boolean indicating if the map region should be modified \nto fit the map view's aspect ratio.</p>"
        },
        "annotations": {
            "values": [],
            "description": "<p>An array of annotations to add to the map.</p>"
        },
        "mapType": {
            "values": [],
            "description": "<p>Map type, either: <a href=\"Titanium.Map.STANDARD_TYPE\">STANDARD_TYPE</a>, <a href=\"Titanium.Map.SATELLITE_TYPE\">SATELLITE_TYPE</a> or <a href=\"Titanium.Map.HYBRID_TYPE\">HYBRID_TYPE</a>.</p>"
        },
        "region": {
            "values": [],
            "description": "<p>A dictionary specifying the location and zoom level of the map.</p>\n\n<p>On the iOS platform, this property can only be set after the map view is loaded.\nTo ensure this property is set when the application starts, wait for the\n[complete][Titanium.UI.Map-event-complete] event.</p>"
        },
        "userLocation": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Boolean indicating if the user's current device location should be shown on the\nmap.</p>"
        },
        "longitudeDelta": {
            "values": [],
            "description": "<p>The amount of east-to-west distance displayed on the map, measured in decimal degrees.</p>"
        },
        "latitudeDelta": {
            "values": [],
            "description": "<p>The amount of north-to-south distance displayed on the map, measured in decimal degrees.</p>"
        },
        "points": {
            "values": [],
            "description": "<p>Array of map points making up the route.</p>"
        },
        "color": {
            "values": [],
            "description": "<p>Color to use when drawing the route, as a color name or hex triplet.</p>"
        },
        "uri": {
            "values": [],
            "description": "<p>URI to the file if it was scanned and added to the media library, or <code>null</code>\nif the file was not added.</p>"
        },
        "allowBackground": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Boolean to indicate if audio should continue playing even if the associated\nAndroid <a href=\"Titanium.Android.Activity\">Activity</a> is paused.</p>"
        },
        "bitRate": {
            "values": [],
            "description": "<p>Bit rate of the current playback stream.</p>"
        },
        "paused": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Boolean indicating if audio playback is paused.</p>"
        },
        "volume": {
            "values": [],
            "description": "<p>Volume of the audio, from 0.0 (muted) to 1.0 (loudest).</p>"
        },
        "bufferSize": {
            "values": [],
            "description": "<p>Size of the buffer used for streaming, in bytes.</p>"
        },
        "time": {
            "values": [],
            "description": "<p>Current playback position of the audio.</p>"
        },
        "compression": {
            "values": [
                "Ti.Media.AUDIO_FORMAT_AAC",
                "Ti.Media.AUDIO_FORMAT_ALAW",
                "Ti.Media.AUDIO_FORMAT_APPLE_LOSSLESS",
                "Ti.Media.AUDIO_FORMAT_ILBC",
                "Ti.Media.AUDIO_FORMAT_IMA4",
                "Ti.Media.AUDIO_FORMAT_LINEAR_PCM",
                "Ti.Media.AUDIO_FORMAT_ULAW"
            ],
            "description": "<p>Audio compression to be used for the recording.</p>"
        },
        "format": {
            "values": [
                "Ti.Media.AUDIO_FILEFORMAT_3GP2",
                "Ti.Media.AUDIO_FILEFORMAT_3GPP",
                "Ti.Media.AUDIO_FILEFORMAT_AIFF",
                "Ti.Media.AUDIO_FILEFORMAT_AMR",
                "Ti.Media.AUDIO_FILEFORMAT_CAF",
                "Ti.Media.AUDIO_FILEFORMAT_MP3",
                "Ti.Media.AUDIO_FILEFORMAT_MP4",
                "Ti.Media.AUDIO_FILEFORMAT_MP4A",
                "Ti.Media.AUDIO_FILEFORMAT_WAVE"
            ],
            "description": "<p>Audio format to be used for the recording.</p>"
        },
        "audioSessionMode": {
            "values": [
                "Ti.Media.AUDIO_SESSION_MODE_AMBIENT",
                "Ti.Media.AUDIO_SESSION_MODE_PLAYBACK",
                "Ti.Media.AUDIO_SESSION_MODE_PLAY_AND_RECORD",
                "Ti.Media.AUDIO_SESSION_MODE_RECORD",
                "Ti.Media.AUDIO_SESSION_MODE_SOLO_AMBIENT"
            ],
            "description": "<p>A constant for the audio session mode to be used. <strong>Deprecated since 3.4.2. Deprecated in favor of the <a href=\"Titanium.Media.audioSessionCategory\">audioSessionCategory</a> property defined in <a href=\"Titanium.Media\">Media</a>.</strong></p>"
        },
        "audioSessionCategory": {
            "values": [
                "Ti.Media.AUDIO_SESSION_CATEGORY_AMBIENT",
                "Ti.Media.AUDIO_SESSION_CATEGORY_PLAYBACK",
                "Ti.Media.AUDIO_SESSION_CATEGORY_PLAY_AND_RECORD",
                "Ti.Media.AUDIO_SESSION_CATEGORY_RECORD",
                "Ti.Media.AUDIO_SESSION_CATEGORY_SOLO_AMBIENT"
            ],
            "description": "<p>A constant for the audio session category to be used.</p>"
        },
        "availableCameraMediaTypes": {
            "values": [
                "Ti.Media.MEDIA_TYPE_PHOTO",
                "Ti.Media.MEDIA_TYPE_VIDEO"
            ],
            "description": "<p>Array of media type constants supported for the camera.</p>"
        },
        "availablePhotoGalleryMediaTypes": {
            "values": [
                "Ti.Media.MEDIA_TYPE_PHOTO",
                "Ti.Media.MEDIA_TYPE_VIDEO"
            ],
            "description": "<p>Array of media type constants supported for saving to the device's camera roll or saved images album.</p>"
        },
        "availablePhotoMediaTypes": {
            "values": [
                "Ti.Media.MEDIA_TYPE_PHOTO",
                "Ti.Media.MEDIA_TYPE_VIDEO"
            ],
            "description": "<p>Array of media type constants supported for the photo library.</p>"
        },
        "averageMicrophonePower": {
            "values": [],
            "description": "<p>Current average microphone level in dB or -1 if microphone monitoring is disabled.</p>"
        },
        "cameraFlashMode": {
            "values": [
                "Ti.Media.CAMERA_FLASH_AUTO",
                "Ti.Media.CAMERA_FLASH_OFF",
                "Ti.Media.CAMERA_FLASH_ON"
            ],
            "description": "<p>Determines how the flash is fired when using the device's camera.</p>"
        },
        "autohide": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Specifies that the library should be hidden automatically after media selection is completed.</p>"
        },
        "allowMultipleSelections": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Set to <code>true</code> to allow the user to select multiple items from the library.</p>"
        },
        "representative": {
            "values": [],
            "description": "<p>A single representative of the selected items.</p>"
        },
        "items": {
            "values": [],
            "description": "<p>A list of all the items chosen by the user.</p>"
        },
        "grouping": {
            "values": [
                "Ti.Media.MUSIC_MEDIA_GROUP_TITLE",
                "Ti.Media.MUSIC_MEDIA_GROUP_ALBUM",
                "Ti.Media.MUSIC_MEDIA_GROUP_ARTIST",
                "Ti.Media.MUSIC_MEDIA_GROUP_ALBUM_ARTIST",
                "Ti.Media.MUSIC_MEDIA_GROUP_COMPOSER",
                "Ti.Media.MUSIC_MEDIA_GROUP_GENRE",
                "Ti.Media.MUSIC_MEDIA_GROUP_PLAYLIST",
                "Ti.Media.MUSIC_MEDIA_GROUP_PODCAST_TITLE"
            ],
            "description": "<p>A constant that specifies the ordering of the result array.</p>"
        },
        "mediaType": {
            "values": [
                "Ti.Media.MUSIC_MEDIA_TYPE_ALL",
                "Ti.Media.MUSIC_MEDIA_TYPE_ANY_AUDIO",
                "Ti.Media.MUSIC_MEDIA_TYPE_AUDIOBOOK",
                "Ti.Media.MUSIC_MEDIA_TYPE_MUSIC",
                "Ti.Media.MUSIC_MEDIA_TYPE_PODCAST"
            ],
            "description": "<p>The media type to filter on.</p>"
        },
        "albumTitle": {
            "values": [],
            "description": "<p>The album title to filter on. Value should be a String.</p>"
        },
        "albumArtist": {
            "values": [],
            "description": "<p>The album artist to filter on. Value should be a String.</p>"
        },
        "isCompilation": {
            "values": [],
            "description": "<p>Filter by whether or not the item is a compilation. Value should be a Boolean.</p>"
        },
        "exact": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Whether or not the predicate is for an exact match.  The default is <code>true</code>.</p>"
        },
        "saveToPhotoGallery": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Specifies if the media should be saved to the photo gallery upon successful capture.</p>"
        },
        "allowEditing": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Specifies if the media should be editable after capture/selection.</p>"
        },
        "videoMaximumDuration": {
            "values": [],
            "description": "<p>Maximum duration (in milliseconds) to allow video capture before completing.</p>"
        },
        "videoQuality": {
            "values": [],
            "description": "<p>Constant to indicate the video quality during capture.</p>"
        },
        "showControls": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Indicates if the built-in camera controls should be displayed.</p>"
        },
        "overlay": {
            "values": [],
            "description": "<p>View to added as an overlay to the camera UI (on top).</p>"
        },
        "inPopOver": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Show the camera in a popover.</p>"
        },
        "popoverView": {
            "values": [],
            "description": "<p>View to position the camera or photo gallery popover on top of.</p>"
        },
        "arrowDirection": {
            "values": [
                "Ti.UI.iPad.POPOVER_ARROW_DIRECTION_ANY",
                "Ti.UI.iPad.POPOVER_ARROW_DIRECTION_DOWN",
                "Ti.UI.iPad.POPOVER_ARROW_DIRECTION_LEFT",
                "Ti.UI.iPad.POPOVER_ARROW_DIRECTION_RIGHT",
                "Ti.UI.iPad.POPOVER_ARROW_DIRECTION_UNKNOWN",
                "Ti.UI.iPad.POPOVER_ARROW_DIRECTION_UP",
                "Ti.UI.iPad.POPOVER_ARROW_DIRECTION_ANY",
                "Ti.UI.iPad.POPOVER_ARROW_DIRECTION_DOWN",
                "Ti.UI.iPad.POPOVER_ARROW_DIRECTION_LEFT",
                "Ti.UI.iPad.POPOVER_ARROW_DIRECTION_RIGHT",
                "Ti.UI.iPad.POPOVER_ARROW_DIRECTION_UP"
            ],
            "description": "<p>Controls the type of arrow and position of the popover.</p>"
        },
        "autorotate": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines if the camera preview should rotate or not.</p>"
        },
        "media": {
            "values": [],
            "description": "<p>The media object, as a <a href=\"Titanium.Blob\">Blob</a>.</p>"
        },
        "cropRect": {
            "values": [],
            "description": "<p>Simple object defining the user's selected crop rectangle, or <code>null</code> if the user has not edited the photo.</p>"
        },
        "inputs": {
            "values": [],
            "description": "<p>An Array of current input ports for the session. See the <code>AUDIO_SESSION_PORT</code> constants.</p>"
        },
        "outputs": {
            "values": [],
            "description": "<p>An Array of current output ports for the session. See the <code>AUDIO_SESSION_PORT</code> constants.</p>"
        },
        "currentPlaybackTime": {
            "values": [],
            "description": "<p>Current point in song playback, in seconds.</p>"
        },
        "repeatMode": {
            "values": [
                "Ti.Media.MUSIC_PLAYER_REPEAT_ALL",
                "Ti.Media.MUSIC_PLAYER_REPEAT_DEFAULT",
                "Ti.Media.MUSIC_PLAYER_REPEAT_NONE",
                "Ti.Media.MUSIC_PLAYER_REPEAT_ONE",
                "Ti.Media.VIDEO_REPEAT_MODE_NONE",
                "Ti.Media.VIDEO_REPEAT_MODE_ONE"
            ],
            "description": "<p>Repeat setting.</p>"
        },
        "shuffleMode": {
            "values": [
                "Ti.Media.MUSIC_PLAYER_SHUFFLE_ALBUMS",
                "Ti.Media.MUSIC_PLAYER_SHUFFLE_DEFAULT",
                "Ti.Media.MUSIC_PLAYER_SHUFFLE_NONE",
                "Ti.Media.MUSIC_PLAYER_SHUFFLE_SONGS"
            ],
            "description": "<p>Shuffle setting.</p>"
        },
        "looping": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines whether the audio should loop upon completion.</p>"
        },
        "allowsAirPlay": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Whether or not the current movie can be played on a remote device.</p>"
        },
        "autoplay": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Indicates if a movie should automatically start playback.</p>"
        },
        "endPlaybackTime": {
            "values": [],
            "description": "<p>The end time of movie playback, in milliseconds.</p>"
        },
        "fullscreen": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines if the movie is presented in the entire screen (obscuring all other application content). </p>"
        },
        "initialPlaybackTime": {
            "values": [],
            "description": "<p>The start time of movie playback, in milliseconds.</p>"
        },
        "mediaControlStyle": {
            "values": [
                "Ti.Media.VIDEO_CONTROL_VOLUME_ONLY",
                "Ti.Media.VIDEO_CONTROL_DEFAULT",
                "Ti.Media.VIDEO_CONTROL_EMBEDDED",
                "Ti.Media.VIDEO_CONTROL_FULLSCREEN",
                "Ti.Media.VIDEO_CONTROL_HIDDEN",
                "Ti.Media.VIDEO_CONTROL_NONE"
            ],
            "description": "<p>The style of the playback controls.</p>"
        },
        "movieControlMode": {
            "values": [],
            "description": "<p>Style of the media playback controls. <strong>Deprecated since 1.8.0. Use <a href=\"Titanium.Media.VideoPlayer.mediaControlStyle\">mediaControlStyle</a> instead.</strong></p>"
        },
        "naturalSize": {
            "values": [],
            "description": "<p>Returns the natural size of the movie.</p>"
        },
        "scalingMode": {
            "values": [
                "Ti.Media.VIDEO_SCALING_ASPECT_FILL",
                "Ti.Media.VIDEO_SCALING_ASPECT_FIT",
                "Ti.Media.VIDEO_SCALING_MODE_FILL",
                "Ti.Media.VIDEO_SCALING_NONE"
            ],
            "description": "<p>Determines how the content scales to fit the view.</p>"
        },
        "sourceType": {
            "values": [
                "Ti.Media.VIDEO_SOURCE_TYPE_FILE",
                "Ti.Media.VIDEO_SOURCE_TYPE_STREAMING",
                "Ti.Media.VIDEO_SOURCE_TYPE_UNKNOWN"
            ],
            "description": "<p>The playback type of the movie.</p>"
        },
        "useApplicationAudioSession": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Indicates if the movie player should inherit the application's audio session\ninstead of creating a new session.\n <strong>Deprecated since 3.5.0. There is no replacement for this property and its use is discouraged.</strong></p>"
        },
        "domain": {
            "values": [],
            "description": "<p>The domain the browser is searching in</p>"
        },
        "isSearching": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Whether or not the browser is currently searching</p>"
        },
        "serviceType": {
            "values": [],
            "description": "<p>The type of the service the browser searches for</p>"
        },
        "isLocal": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>whether or not the service is local to the device</p>"
        },
        "socket": {
            "values": [],
            "description": "<p>the TCPSocket object that is used to connect to the service</p>"
        },
        "expiryDate": {
            "values": [],
            "description": "<p>The expiration Date of the cookie.</p>"
        },
        "httponly": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>The httponly attribute of the cookie.</p>"
        },
        "originalUrl": {
            "values": [],
            "description": "<p>The origual url attribute of the cookie.</p>"
        },
        "secure": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>The secure attribute of the cookie.</p>"
        },
        "autoEncodeUrl": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines whether automatic encoding is enabled for the specified URL.</p>"
        },
        "autoRedirect": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines whether automatic automatic handling of HTTP redirects is enabled.</p>"
        },
        "cache": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines whether HTTP responses are cached.</p>"
        },
        "enableKeepAlive": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines whether the client should attempt to keep a persistent connection.</p>"
        },
        "file": {
            "values": [],
            "description": "<p>Target local file to receive data.</p>"
        },
        "onerror": {
            "values": [],
            "description": "<p>Function to be called upon a error response.</p>"
        },
        "onload": {
            "values": [],
            "description": "<p>Function to be called upon a successful response.</p>"
        },
        "onreadystatechange": {
            "values": [],
            "description": "<p>Function to be called for each <a href=\"Titanium.Network.HTTPClient.readyState\">readyState</a> change.</p>"
        },
        "password": {
            "values": [],
            "description": "<p>Sets the password parameter for authentication credentials.</p>"
        },
        "securityManager": {
            "values": [],
            "description": "<p>The Security Manager for this client.</p>"
        },
        "timeout": {
            "values": [],
            "description": "<p>Timeout in milliseconds when the connection should be aborted.</p>"
        },
        "tlsVersion": {
            "values": [
                "Ti.Network.TLS_VERSION_1_0",
                "Ti.Network.TLS_VERSION_1_1",
                "Ti.Network.TLS_VERSION_1_2"
            ],
            "description": "<p>Sets the TLS version to use for handshakes.</p>"
        },
        "username": {
            "values": [],
            "description": "<p>Sets the username parameter for authentication credentials.</p>"
        },
        "validatesSecureCertificate": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines how SSL certification validation is performed on connection.</p>"
        },
        "withCredentials": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines whether the request should include any cookies and HTTP authentication information.</p>"
        },
        "readyState": {
            "values": [],
            "description": "<p>The state for which <code>onreadystatechange</code> was invoked. Set to one of <code>Titanium.Network.HTTPClient</code> ready-state constants</p>"
        },
        "httpURLFormatter": {
            "values": [],
            "description": "<p>User-defined function that is called everytime HTTPClient connects to a remote resource.</p>"
        },
        "callback": {
            "values": [],
            "description": "<p>Callback function invoked upon receiving a new push notification.</p>"
        },
        "data": {
            "values": [],
            "description": "<p>The <code>userinfo</code> dictionary passed to the Apple Push Notification Service.</p>"
        },
        "inBackground": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Boolean indicating if notification was received while app was in background. \nThis property became available in Titanium Mobile 3.1.0 for iOS.</p>"
        },
        "host": {
            "values": [],
            "description": "<p>The host to connect to or listen on.</p>"
        },
        "port": {
            "values": [],
            "description": "<p>The port to connect to or listen on.</p>"
        },
        "listenQueueSize": {
            "values": [],
            "description": "<p>Max number of pending incoming connections to be allowed when the socket is in the <a href=\"Titanium.Network.Socket.LISTENING\">LISTENING</a> state.</p>"
        },
        "connected": {
            "values": [],
            "description": "<p>Callback to be fired when the socket enters the \"connected\" state.</p>"
        },
        "accepted": {
            "values": [],
            "description": "<p>Callback to be fired when a listener accepts a connection.</p>"
        },
        "errorCode": {
            "values": [],
            "description": "<p>The error code of the error (potentially system-dependent). <strong>Deprecated since 3.1.0.</strong></p>"
        },
        "inbound": {
            "values": [],
            "description": "<p>Socket which represents the inbound connection.</p>"
        },
        "hostName": {
            "values": [],
            "description": "<p>the host name to connect to.  Must be <a href=\"Titanium.Network.INADDR_ANY\">INADDR_ANY</a> or an identifier for the local device in order to listen</p>"
        },
        "isValid": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>whether or not the socket is valid</p>"
        },
        "mode": {
            "values": [
                "Ti.Stream.MODE_READ",
                "Ti.Stream.MODE_WRITE",
                "Ti.Stream.MODE_APPEND",
                "Ti.UI.iOS.BLEND_MODE_CLEAR",
                "Ti.UI.iOS.BLEND_MODE_COLOR",
                "Ti.UI.iOS.BLEND_MODE_COLOR_BURN",
                "Ti.UI.iOS.BLEND_MODE_COLOR_DODGE",
                "Ti.UI.iOS.BLEND_MODE_COPY",
                "Ti.UI.iOS.BLEND_MODE_DARKEN",
                "Ti.UI.iOS.BLEND_MODE_DESTINATION_ATOP",
                "Ti.UI.iOS.BLEND_MODE_DESTINATION_IN",
                "Ti.UI.iOS.BLEND_MODE_DESTINATION_OUT",
                "Ti.UI.iOS.BLEND_MODE_DESTINATION_OVER",
                "Ti.UI.iOS.BLEND_MODE_DIFFERENCE",
                "Ti.UI.iOS.BLEND_MODE_EXCLUSION",
                "Ti.UI.iOS.BLEND_MODE_HARD_LIGHT",
                "Ti.UI.iOS.BLEND_MODE_HUE",
                "Ti.UI.iOS.BLEND_MODE_LIGHTEN",
                "Ti.UI.iOS.BLEND_MODE_LUMINOSITY",
                "Ti.UI.iOS.BLEND_MODE_MULTIPLY",
                "Ti.UI.iOS.BLEND_MODE_NORMAL",
                "Ti.UI.iOS.BLEND_MODE_OVERLAY",
                "Ti.UI.iOS.BLEND_MODE_PLUS_DARKER",
                "Ti.UI.iOS.BLEND_MODE_PLUS_LIGHTER",
                "Ti.UI.iOS.BLEND_MODE_SATURATION",
                "Ti.UI.iOS.BLEND_MODE_SCREEN",
                "Ti.UI.iOS.BLEND_MODE_SOFT_LIGHT",
                "Ti.UI.iOS.BLEND_MODE_SOURCE_ATOP",
                "Ti.UI.iOS.BLEND_MODE_SOURCE_IN",
                "Ti.UI.iOS.BLEND_MODE_SOURCE_OUT",
                "Ti.UI.iOS.BLEND_MODE_XOR"
            ],
            "description": "<p>the socket's mode</p>"
        },
        "stripTerminator": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>strip terminating null character when sending string data; default is false</p>"
        },
        "batteryMonitoring": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines whether battery monitoring is enabled.</p>"
        },
        "bytesProcessed": {
            "values": [],
            "description": "<p>Number of bytes processed, or -1 in the event of an error or end of stream.</p>"
        },
        "errorState": {
            "values": [],
            "description": "<p>Whether an error was encountered. Set to 1 in the case of an error, 0\notherwise.\n <strong>Deprecated since 3.1.0.</strong></p>"
        },
        "errorDescription": {
            "values": [],
            "description": "<p>Text description of the error. <strong>Deprecated since 3.1.0.</strong></p>"
        },
        "fromStream": {
            "values": [],
            "description": "<p>Stream being read from.</p>"
        },
        "toStream": {
            "values": [],
            "description": "<p>Stream being written to.</p>"
        },
        "buffer": {
            "values": [],
            "description": "<p>Buffer object holding the data currently being pumped to the handler method.</p>"
        },
        "totalBytesProcessed": {
            "values": [],
            "description": "<p>Total number of bytes read from the stream so far, \nincluding the data passed to this current invocation of the handler.</p>"
        },
        "userAgent": {
            "values": [],
            "description": "<p>User-agent string used by Titanium.</p>"
        },
        "a": {
            "values": [],
            "description": "<p>The entry at position [1,1] in the matrix.</p>"
        },
        "b": {
            "values": [],
            "description": "<p>The entry at position [1,2] in the matrix.</p>"
        },
        "c": {
            "values": [],
            "description": "<p>The entry at position [2,1] in the matrix.</p>"
        },
        "d": {
            "values": [],
            "description": "<p>The entry at position [2,2] in the matrix.</p>"
        },
        "tx": {
            "values": [],
            "description": "<p>The entry at position [3,1] in the matrix.</p>"
        },
        "ty": {
            "values": [],
            "description": "<p>The entry at position [3,2] in the matrix.</p>"
        },
        "scale": {
            "values": [],
            "description": "<p>Scale the matrix by the specified scaling factor. The same scaling factor is used\nfor both horizontal and vertical scaling.</p>"
        },
        "rotate": {
            "values": [],
            "description": "<p>Rotation angle, in degrees. See the <a href=\"Titanium.UI.2DMatrix.rotate\">rotate</a> method\nfor a discussion of rotation.</p>"
        },
        "m11": {
            "values": [],
            "description": "<p>The entry at position [1,1] in the matrix.</p>"
        },
        "m12": {
            "values": [],
            "description": "<p>The entry at position [1,2] in the matrix.</p>"
        },
        "m13": {
            "values": [],
            "description": "<p>The entry at position [1,3] in the matrix.</p>"
        },
        "m14": {
            "values": [],
            "description": "<p>The entry at position [1,4] in the matrix.</p>"
        },
        "m21": {
            "values": [],
            "description": "<p>The entry at position [2,1] in the matrix.</p>"
        },
        "m22": {
            "values": [],
            "description": "<p>The entry at position [2,2] in the matrix.</p>"
        },
        "m23": {
            "values": [],
            "description": "<p>The entry at position [2,3] in the matrix.</p>"
        },
        "m24": {
            "values": [],
            "description": "<p>The entry at position [2,4] in the matrix.</p>"
        },
        "m31": {
            "values": [],
            "description": "<p>The entry at position [3,1] in the matrix.</p>"
        },
        "m32": {
            "values": [],
            "description": "<p>The entry at position [3,2] in the matrix.</p>"
        },
        "m33": {
            "values": [],
            "description": "<p>The entry at position [3,3] in the matrix.</p>"
        },
        "m34": {
            "values": [],
            "description": "<p>The entry at position [3,4] in the matrix.</p>"
        },
        "m41": {
            "values": [],
            "description": "<p>The entry at position [4,1] in the matrix.</p>"
        },
        "m42": {
            "values": [],
            "description": "<p>The entry at position [4,2] in the matrix.</p>"
        },
        "m43": {
            "values": [],
            "description": "<p>The entry at position [4,3] in the matrix.</p>"
        },
        "m44": {
            "values": [],
            "description": "<p>The entry at position [4,4] in the matrix.</p>"
        },
        "font": {
            "values": [],
            "description": "<p>Font used for the message text.</p>"
        },
        "messageid": {
            "values": [],
            "description": "<p>Key identifying a string in the locale file to use for the message text.</p>"
        },
        "indicatorColor": {
            "values": [],
            "description": "<p>Color of the animated indicator.</p>"
        },
        "indicatorDiameter": {
            "values": [],
            "description": "<p>Diameter of the indicator.</p>"
        },
        "androidView": {
            "values": [],
            "description": "<p>View to load inside the message area, to create a custom layout.</p>"
        },
        "ok": {
            "values": [],
            "description": "<p>Text for the <code>OK</code> button.</p>"
        },
        "okid": {
            "values": [],
            "description": "<p>Key identifying a string in the locale file to use for the <code>ok</code> text.</p>"
        },
        "persistent": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Boolean value indicating if the alert dialog should only be cancelled by user gesture or by hide method.</p>"
        },
        "buttonNames": {
            "values": [],
            "description": "<p>Name of each button to create.</p>"
        },
        "cancelable": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>When <code>true</code> allows the user to cancel the progress dialog by pressing the BACK button.</p>"
        },
        "canceledOnTouchOutside": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>When <code>cancelable</code> is set to <code>true</code> and this is set to <code>true</code>, the dialog is canceled when touched outside the window's bounds.</p>"
        },
        "min": {
            "values": [],
            "description": "<p>Minimum value of the progress bar.</p>"
        },
        "max": {
            "values": [],
            "description": "<p>Maximum value of the progress bar.</p>"
        },
        "hintText": {
            "values": [],
            "description": "<p>Text to show when the search view field is not focused.</p>"
        },
        "iconified": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Iconifies or expands the search view</p>"
        },
        "iconifiedByDefault": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Sets the default or resting state of the search view</p>"
        },
        "submitEnabled": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Whether to display the submit button when necessary or never display.</p>"
        },
        "autoreverse": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Specifies if the animation should be replayed in reverse upon completion.</p>"
        },
        "curve": {
            "values": [
                "Ti.UI.ANIMATION_CURVE_EASE_IN",
                "Ti.UI.ANIMATION_CURVE_EASE_IN_OUT",
                "Ti.UI.ANIMATION_CURVE_EASE_OUT",
                "Ti.UI.ANIMATION_CURVE_LINEAR"
            ],
            "description": "<p>Animation curve or easing function to apply to the animation.</p>"
        },
        "delay": {
            "values": [],
            "description": "<p>Delay, in milliseconds before starting the animation.</p>"
        },
        "opaque": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Value of the <code>opaque</code> property at the end of the animation.</p>"
        },
        "transition": {
            "values": [
                "Ti.UI.iPhone.AnimationStyle.CURL_DOWN",
                "Ti.UI.iPhone.AnimationStyle.CURL_UP",
                "Ti.UI.iPhone.AnimationStyle.FLIP_FROM_LEFT",
                "Ti.UI.iPhone.AnimationStyle.FLIP_FROM_RIGHT",
                "Ti.UI.iPhone.AnimationStyle.NONE",
                "Ti.UI.iPhone.AnimationStyle.CURL_DOWN",
                "Ti.UI.iPhone.AnimationStyle.CURL_UP",
                "Ti.UI.iPhone.AnimationStyle.FLIP_FROM_LEFT",
                "Ti.UI.iPhone.AnimationStyle.FLIP_FROM_RIGHT",
                "Ti.UI.iPhone.AnimationStyle.NONE"
            ],
            "description": "<p>Transition type to use during a transition animation.</p>"
        },
        "view": {
            "values": [],
            "description": "<p>New view to transition to.</p>"
        },
        "range": {
            "values": [],
            "description": "<p>Attribute range.</p>"
        },
        "text": {
            "values": [],
            "description": "<p>The text applied to the attributed string.</p>"
        },
        "attributes": {
            "values": [],
            "description": "<p>An array of attributes to add.</p>"
        },
        "disabledColor": {
            "values": [],
            "description": "<p>Text color of the button in its disabled state, as a color name or hex triplet.</p>"
        },
        "selectedColor": {
            "values": [],
            "description": "<p>Button text color used to indicate the selected state, as a color name or hex triplet.</p>"
        },
        "shadowColor": {
            "values": [],
            "description": "<p>Shadow color of the <a href=\"Titanium.UI.Button.title\">title</a>, as a color name or hex triplet.</p>"
        },
        "shadowOffset": {
            "values": [],
            "description": "<p>Shadow offset of the <a href=\"Titanium.UI.Button.title\">title</a>, as a dictionary with the properties <code>x</code> and <code>y</code>.</p>"
        },
        "shadowRadius": {
            "values": [],
            "description": "<p>Shadow radius of the <a href=\"Titanium.UI.Button.title\">title</a>.</p>"
        },
        "systemButton": {
            "values": [
                "Ti.UI.iPhone.SystemButton.ACTION",
                "Ti.UI.iPhone.SystemButton.ACTIVITY",
                "Ti.UI.iPhone.SystemButton.ADD",
                "Ti.UI.iPhone.SystemButton.BOOKMARKS",
                "Ti.UI.iPhone.SystemButton.CAMERA",
                "Ti.UI.iPhone.SystemButton.CANCEL",
                "Ti.UI.iPhone.SystemButton.COMPOSE",
                "Ti.UI.iPhone.SystemButton.CONTACT_ADD",
                "Ti.UI.iPhone.SystemButton.DISCLOSURE",
                "Ti.UI.iPhone.SystemButton.DONE",
                "Ti.UI.iPhone.SystemButton.EDIT",
                "Ti.UI.iPhone.SystemButton.FAST_FORWARD",
                "Ti.UI.iPhone.SystemButton.FIXED_SPACE",
                "Ti.UI.iPhone.SystemButton.FLEXIBLE_SPACE",
                "Ti.UI.iPhone.SystemButton.INFO_DARK",
                "Ti.UI.iPhone.SystemButton.INFO_LIGHT",
                "Ti.UI.iPhone.SystemButton.ORGANIZE",
                "Ti.UI.iPhone.SystemButton.PAUSE",
                "Ti.UI.iPhone.SystemButton.PLAY",
                "Ti.UI.iPhone.SystemButton.REFRESH",
                "Ti.UI.iPhone.SystemButton.REPLY",
                "Ti.UI.iPhone.SystemButton.REWIND",
                "Ti.UI.iPhone.SystemButton.SAVE",
                "Ti.UI.iPhone.SystemButton.SPINNER",
                "Ti.UI.iPhone.SystemButton.STOP",
                "Ti.UI.iPhone.SystemButton.TRASH"
            ],
            "description": "<p>Specifies an iOS system button appearance, as defined in <a href=\"Titanium.UI.iPhone.SystemButton\">SystemButton</a>.</p>"
        },
        "textAlign": {
            "values": [
                "Ti.UI.TEXT_ALIGNMENT_CENTER",
                "Ti.UI.TEXT_ALIGNMENT_LEFT",
                "Ti.UI.TEXT_ALIGNMENT_RIGHT",
                "Ti.UI.TEXT_ALIGNMENT_CENTER",
                "Ti.UI.TEXT_ALIGNMENT_LEFT",
                "Ti.UI.TEXT_ALIGNMENT_RIGHT"
            ],
            "description": "<p>Text alignment, specified using one of the <a href=\"Titanium.UI\">UI</a> text alignment constants.</p>"
        },
        "verticalAlign": {
            "values": [
                "Ti.UI.TEXT_VERTICAL_ALIGNMENT_BOTTOM",
                "Ti.UI.TEXT_VERTICAL_ALIGNMENT_CENTER",
                "Ti.UI.TEXT_VERTICAL_ALIGNMENT_TOP",
                "Ti.UI.TEXT_VERTICAL_ALIGNMENT_BOTTOM",
                "Ti.UI.TEXT_VERTICAL_ALIGNMENT_CENTER",
                "Ti.UI.TEXT_VERTICAL_ALIGNMENT_TOP"
            ],
            "description": "<p>Vertical alignment for the text field, specified using one of the \nvertical alignment constants from <a href=\"Titanium.UI\">UI</a>.</p>"
        },
        "index": {
            "values": [],
            "description": "<p>Index of the currently selected button.</p>"
        },
        "labels": {
            "values": [],
            "description": "<p>Array of labels for the button bar.</p>"
        },
        "images": {
            "values": [],
            "description": "<p>Array of images to display in the view.</p>"
        },
        "selected": {
            "values": [],
            "description": "<p>Index to make selected.</p>"
        },
        "canDelete": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines whether this item can be deleted when it edit mode.</p>"
        },
        "selectedImage": {
            "values": [],
            "description": "<p>Image or path to image to display in the item as it is selected.</p>"
        },
        "columnCount": {
            "values": [],
            "description": "<p>The number of columns of items in the view.</p>"
        },
        "rowCount": {
            "values": [],
            "description": "<p>The number of rows of items in the view.</p>"
        },
        "editable": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines whether edit mode is activated by a longpress of an item.</p>"
        },
        "wobble": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines whether the wobble visual editing cue is enabled in edit mode.</p>"
        },
        "barColor": {
            "values": [],
            "description": "<p>Bar color of the email dialog window, as a color name or hex triplet.</p>"
        },
        "bccRecipients": {
            "values": [],
            "description": "<p>Recipients of the email included via the <code>BCC</code> (Blind Carbon Copy) field.</p>"
        },
        "ccRecipients": {
            "values": [],
            "description": "<p>Recipients of the email included via the <code>CC</code> (Carbon Copy) field.</p>"
        },
        "html": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines whether the email message, specifically the contents of \n<a href=\"Titanium.UI.EmailDialog.messageBody\">messageBody</a>, should be sent as HTML content type \nrather than plain text.</p>"
        },
        "messageBody": {
            "values": [],
            "description": "<p>Email message body.</p>"
        },
        "toRecipients": {
            "values": [],
            "description": "<p>Recipients of the email included via the main <code>TO</code> field.</p>"
        },
        "fontFamily": {
            "values": [],
            "description": "<p>Specifies the font family or specific font to use.</p>"
        },
        "fontSize": {
            "values": [],
            "description": "<p>Font size, in platform-dependent units.</p>"
        },
        "fontWeight": {
            "values": [],
            "description": "<p>Font weight. Valid values are \"bold\" or \"normal\".</p>"
        },
        "fontStyle": {
            "values": [],
            "description": "<p>Font style. Valid values are \"italic\" or \"normal\".</p>"
        },
        "textStyle": {
            "values": [
                "Ti.UI.TEXT_STYLE_BODY",
                "Ti.UI.TEXT_STYLE_CAPTION1",
                "Ti.UI.TEXT_STYLE_CAPTION2",
                "Ti.UI.TEXT_STYLE_FOOTNOTE",
                "Ti.UI.TEXT_STYLE_HEADLINE",
                "Ti.UI.TEXT_STYLE_SUBHEADLINE"
            ],
            "description": "<p>The text style for the font.</p>"
        },
        "decodeRetries": {
            "values": [],
            "description": "<p>Number of times to retry decoding the bitmap at a URL.</p>"
        },
        "defaultImage": {
            "values": [],
            "description": "<p>Local path to the default image to display while loading a remote image.</p>"
        },
        "enableZoomControls": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Show zoom controls when the user touches the image view.</p>"
        },
        "hires": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Set to <code>true</code> to prevent scaling of 2x-resolution remote images for Retina \ndisplays.</p>"
        },
        "preventDefaultImage": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Prevent the default image from being displayed while loading a remote image. This property \nis ignored when the <code>defaultImage</code> property is set.</p>"
        },
        "repeatCount": {
            "values": [],
            "description": "<p>Number of times to repeat the image animation.</p>"
        },
        "reverse": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Run the animation in reverse.</p>"
        },
        "attributedString": {
            "values": [],
            "description": "<p>Specify an attributed string for the label.</p>"
        },
        "autoLink": {
            "values": [
                "Ti.UI.AUTOLINK_ALL",
                "Ti.UI.AUTOLINK_CALENDAR",
                "Ti.UI.AUTOLINK_EMAIL_ADDRESSES",
                "Ti.UI.AUTOLINK_MAP_ADDRESSES",
                "Ti.UI.AUTOLINK_NONE",
                "Ti.UI.AUTOLINK_PHONE_NUMBERS",
                "Ti.UI.AUTOLINK_URLS",
                "Ti.UI.AUTOLINK_ALL",
                "Ti.UI.AUTOLINK_CALENDAR",
                "Ti.UI.AUTOLINK_EMAIL_ADDRESSES",
                "Ti.UI.AUTOLINK_MAP_ADDRESSES",
                "Ti.UI.AUTOLINK_NONE",
                "Ti.UI.AUTOLINK_PHONE_NUMBERS",
                "Ti.UI.AUTOLINK_URLS"
            ],
            "description": "<p>Automatically convert certain text items in the label to clickable links.</p>"
        },
        "backgroundPaddingBottom": {
            "values": [],
            "description": "<p>Number of pixels to extend the background image past the label on the bottom.</p>"
        },
        "backgroundPaddingLeft": {
            "values": [],
            "description": "<p>Number of pixels to extend the background image past the label on the left.</p>"
        },
        "backgroundPaddingRight": {
            "values": [],
            "description": "<p>Number of pixels to extend the background image past the label on the right.</p>"
        },
        "backgroundPaddingTop": {
            "values": [],
            "description": "<p>Number of pixels to extend the background image past the label on the top.</p>"
        },
        "highlightedColor": {
            "values": [],
            "description": "<p>Color of the label when in the highlighted state, as a color name or hex triplet.</p>"
        },
        "includeFontPadding": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Includes extra top and bottom padding to make room for accents that go above normal ascent and descent.</p>"
        },
        "lines": {
            "values": [],
            "description": "<p>Makes the label be exactly this many lines tall.</p>"
        },
        "maxLines": {
            "values": [],
            "description": "<p>Makes the label at most this many lines tall.</p>"
        },
        "minimumFontSize": {
            "values": [],
            "description": "<p>Minimum font size when the font is sized based on the contents.</p>"
        },
        "textid": {
            "values": [],
            "description": "<p>Key identifying a string from the locale file to use for the label text.</p>"
        },
        "ellipsize": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Causes words in the text that are longer than the view is wide to be ellipsized instead of broken in the middle.</p>"
        },
        "wordWrap": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Enable or disable word wrapping in the label.</p>"
        },
        "itemId": {
            "values": [],
            "description": "<p>A user defined string that gets passed to events.</p>"
        },
        "accessoryType": {
            "values": [
                "Ti.UI.LIST_ACCESSORY_TYPE_CHECKMARK",
                "Ti.UI.LIST_ACCESSORY_TYPE_DETAIL",
                "Ti.UI.LIST_ACCESSORY_TYPE_DISCLOSURE",
                "Ti.UI.LIST_ACCESSORY_TYPE_NONE"
            ],
            "description": "<p>Sets an accessory on the right side of an item.</p>"
        },
        "selectedBackgroundColor": {
            "values": [],
            "description": "<p>Background color of the view, as a color name or hex triplet when item is selected.</p>"
        },
        "selectedBackgroundImage": {
            "values": [],
            "description": "<p>Background image to render when the item is selected.</p>"
        },
        "selectedBackgroundGradient": {
            "values": [],
            "description": "<p>Background gradient to render when the item is selected.</p>"
        },
        "canEdit": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Specifies if the item can be deleted by a user initiated action.</p>"
        },
        "canMove": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Specifies if the item can be reordered within the list view by a user initiated action.</p>"
        },
        "editActions": {
            "values": [],
            "description": "<p>Specifies custom action items to be shown when when a list item is edited.</p>"
        },
        "searchableText": {
            "values": [],
            "description": "<p>The text to match against when the <a href=\"Titanium.UI.ListView\">ListView</a> is performing a search.</p>"
        },
        "selectionStyle": {
            "values": [],
            "description": "<p>Selection style constant to control the selection color.</p>"
        },
        "properties": {
            "values": [],
            "description": "<p>Contains key-value pairs of view properties and their values that are applied to the ListItem.</p>"
        },
        "childTemplates": {
            "values": [],
            "description": "<p>Contains an array of subview templates to be added (in order) as children to this view.</p>"
        },
        "bindId": {
            "values": [],
            "description": "<p>View's ID (or set of IDs) used for data binding. This value must be unique.</p>"
        },
        "template": {
            "values": [],
            "description": "<p>Template ID configured with the <a href=\"Titanium.UI.ListView.templates\">templates</a> property or\n<a href=\"Titanium.UI.LIST_ITEM_TEMPLATE_DEFAULT\">LIST_ITEM_TEMPLATE_DEFAULT</a>.</p>"
        },
        "footerTitle": {
            "values": [],
            "description": "<p>Title of this section footer.</p>"
        },
        "headerTitle": {
            "values": [],
            "description": "<p>Title of this section header.</p>"
        },
        "footerView": {
            "values": [],
            "description": "<p>View to use for this section footer.</p>"
        },
        "headerView": {
            "values": [],
            "description": "<p>View to use for this section header.</p>"
        },
        "allowsSelection": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines whether this item can be selected.</p>"
        },
        "canScroll": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines if the list view can scroll in response to user actions.</p>"
        },
        "editing": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines if the list view is currently in editing mode.</p>"
        },
        "pruneSectionsOnEdit": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines if empty sections are retained when the user completes editing the list view.</p>"
        },
        "templates": {
            "values": [],
            "description": "<p>Contain key-value pairs mapping a style name (key) to an <a href=\"ItemTemplate\">ItemTemplate</a> (value).</p>"
        },
        "separatorHeight": {
            "values": [],
            "description": "<p>height of the ListView separator.</p>"
        },
        "footerDividersEnabled": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>When set to false, the ListView will not draw the divider before the footer view.</p>"
        },
        "headerDividersEnabled": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>When set to false, the ListView will not draw the divider after the header view.</p>"
        },
        "pullView": {
            "values": [],
            "description": "<p>View positioned above the first row that is only revealed when the user drags the list view contents down.</p>"
        },
        "refreshControl": {
            "values": [],
            "description": "<p>View positioned above the first row that is only revealed when the user drags the list view contents down.</p>"
        },
        "keepSectionsInSearch": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines if the section information is displayed in the search results when using the <code>searchText</code> property.</p>"
        },
        "sectionIndexTitles": {
            "values": [],
            "description": "<p>Array of objects (with <code>title</code> and <code>index</code> properties) to control the list view index.</p>"
        },
        "scrollIndicatorStyle": {
            "values": [
                "Ti.UI.iPhone.ScrollIndicatorStyle.BLACK",
                "Ti.UI.iPhone.ScrollIndicatorStyle.DEFAULT",
                "Ti.UI.iPhone.ScrollIndicatorStyle.WHITE",
                "Ti.UI.iPhone.ScrollIndicatorStyle.BLACK",
                "Ti.UI.iPhone.ScrollIndicatorStyle.DEFAULT",
                "Ti.UI.iPhone.ScrollIndicatorStyle.WHITE"
            ],
            "description": "<p>Style of the scrollbar.</p>"
        },
        "willScrollOnStatusTap": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Controls the scroll-to-top gesture.</p>"
        },
        "separatorInsets": {
            "values": [],
            "description": "<p>The insets for list view separators (applies to all cells). This property is applicable on iOS 7 and greater.</p>"
        },
        "separatorStyle": {
            "values": [
                "Ti.UI.iPhone.ListViewSeparatorStyle.NONE",
                "Ti.UI.iPhone.ListViewSeparatorStyle.SINGLE_LINE"
            ],
            "description": "<p>Separator style constant.</p>"
        },
        "sections": {
            "values": [],
            "description": "<p>Sections of this list.</p>"
        },
        "searchText": {
            "values": [],
            "description": "<p>The string to use as the search parameter.</p>"
        },
        "searchView": {
            "values": [],
            "description": "<p>Search field to use for the list view.</p>"
        },
        "caseInsensitiveSearch": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines if the search performed is case insensitive.</p>"
        },
        "showVerticalScrollIndicator": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines whether this list view displays a vertical scroll indicator.</p>"
        },
        "separatorColor": {
            "values": [],
            "description": "<p>Separator line color between rows, as a color name or hex triplet.</p>"
        },
        "defaultItemTemplate": {
            "values": [],
            "description": "<p>Sets the default template for list data items that do not specify the <code>template</code> property.</p>"
        },
        "animationStyle": {
            "values": [
                "Ti.UI.iPhone.RowAnimationStyle.BOTTOM",
                "Ti.UI.iPhone.RowAnimationStyle.FADE",
                "Ti.UI.iPhone.RowAnimationStyle.LEFT",
                "Ti.UI.iPhone.RowAnimationStyle.NONE",
                "Ti.UI.iPhone.RowAnimationStyle.RIGHT",
                "Ti.UI.iPhone.RowAnimationStyle.TOP"
            ],
            "description": "<p>Type of animation to use for cell insertions and deletions.</p>"
        },
        "sectionIndex": {
            "values": [],
            "description": "<p>The sectionIndex of the reference item.</p>"
        },
        "itemIndex": {
            "values": [],
            "description": "<p>The itemIndex of the reference item.</p>"
        },
        "mask": {
            "values": [],
            "description": "<p>Image drawn as the background image.</p>"
        },
        "tint": {
            "values": [],
            "description": "<p>Color to combine with the image, as a color name or hex triplet.</p>"
        },
        "window": {
            "values": [],
            "description": "<p>Root window to add to this navigation group.</p>"
        },
        "navBarAtTop": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Specifies whether the navigation should be at the top of the screen or the bottom of the screen.</p>"
        },
        "xOffset": {
            "values": [],
            "description": "<p>X offset from the default position, in pixels.</p>"
        },
        "yOffset": {
            "values": [],
            "description": "<p>Y offset from the default position, in pixels.</p>"
        },
        "horizontalMargin": {
            "values": [],
            "description": "<p>Horizontal placement of the notification, <em>as a fraction of the screen width</em>.</p>"
        },
        "verticalMargin": {
            "values": [],
            "description": "<p>Vertical placement of the notifcation, <em>as a fraction of the screen height</em>.</p>"
        },
        "options": {
            "values": [],
            "description": "<p>List of option names to display in the dialog.</p>"
        },
        "opaquebackground": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Boolean value indicating if the option dialog should have an opaque background.</p>"
        },
        "selectedIndex": {
            "values": [],
            "description": "<p>Defines the default selected option.</p>"
        },
        "rect": {
            "values": [],
            "description": "<p>Positions the arrow of the option dialog relative to the attached view's dimensions.</p>"
        },
        "columns": {
            "values": [],
            "description": "<p>Columns used for this picker, as an array of <a href=\"Titanium.UI.PickerColumn\">PickerColumn</a> objects.</p>"
        },
        "countDownDuration": {
            "values": [],
            "description": "<p>Duration in milliseconds used for a Countdown Timer picker.</p>"
        },
        "format24": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines whether the Time pickers display in 24-hour or 12-hour clock format.</p>"
        },
        "locale": {
            "values": [],
            "description": "<p>Locale used when displaying Date and Time picker values.</p>"
        },
        "maxDate": {
            "values": [],
            "description": "<p>Maximum date displayed when a Date picker is in use.</p>"
        },
        "minDate": {
            "values": [],
            "description": "<p>Minimum date displayed when a Date picker is in use.</p>"
        },
        "minuteInterval": {
            "values": [],
            "description": "<p>Interval in minutes displayed when one of the Time types of pickers is in use.</p>"
        },
        "selectionIndicator": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines whether the visual selection indicator is shown.</p>"
        },
        "selectionOpens": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines whether calling the method <code>setSelectedRow</code> opens when called</p>"
        },
        "useSpinner": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines whether the non-native Android control, with a spinning wheel that looks and \nbehaves like the iOS picker, is invoked rather than the default native \"dropdown\" style.</p>"
        },
        "visibleItems": {
            "values": [],
            "description": "<p>Number of visible rows to display. This is only applicable to a plain picker and when the \n<code>useSpinner</code> is <code>true</code>.</p>"
        },
        "calendarViewShown": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines whether the calenderView is visible.</p>"
        },
        "selectedRow": {
            "values": [],
            "description": "<p>The selected row in this column.</p>"
        },
        "canCancelEvents": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines whether this scroll view can cancel subview touches in order to scroll instead.</p>"
        },
        "contentOffset": {
            "values": [],
            "description": "<p>X and Y coordinates to which to reposition the top-left point of the scrollable region.</p>"
        },
        "disableBounce": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines whether scroll bounce of the scrollable region is enabled.</p>"
        },
        "horizontalBounce": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines whether horizontal scroll bounce of the scrollable region is enabled.</p>"
        },
        "maxZoomScale": {
            "values": [],
            "description": "<p>Maximum scaling factor of the scrollable region and its content.</p>"
        },
        "minZoomScale": {
            "values": [],
            "description": "<p>Minimum scaling factor of the scrollable region and its content.</p>"
        },
        "scrollsToTop": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Controls whether the scroll-to-top gesture is effective.</p>"
        },
        "scrollType": {
            "values": [],
            "description": "<p>Limits the direction of the scrollable region, overriding the deduced setting. Set to \n<code>horizontal</code> or <code>vertical</code>.</p>"
        },
        "verticalBounce": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines whether vertical scroll bounce of the scrollable region is enabled.</p>"
        },
        "zoomScale": {
            "values": [],
            "description": "<p>Scaling factor of the scroll view's content.</p>"
        },
        "contentWidth": {
            "values": [],
            "description": "<p>Width of the scrollable region.</p>"
        },
        "contentHeight": {
            "values": [],
            "description": "<p>Height of the scrollable region.</p>"
        },
        "scrollingEnabled": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines whether scrolling is enabled for the view.</p>"
        },
        "showHorizontalScrollIndicator": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines whether the horizontal scroll indicator is visible.</p>"
        },
        "decelerationRate": {
            "values": [
                "Ti.UI.iOS.SCROLL_DECELERATION_RATE_FAST",
                "Ti.UI.iOS.SCROLL_DECELERATION_RATE_NORMAL"
            ],
            "description": "<p>The deceleration rate of the ScrollView.</p>"
        },
        "overScrollMode": {
            "values": [
                "Ti.UI.Android.OVER_SCROLL_ALWAYS",
                "Ti.UI.Android.OVER_SCROLL_IF_CONTENT_SCROLLS",
                "Ti.UI.Android.OVER_SCROLL_NEVER",
                "Ti.UI.Android.OVER_SCROLL_ALWAYS",
                "Ti.UI.Android.OVER_SCROLL_IF_CONTENT_SCROLLS",
                "Ti.UI.Android.OVER_SCROLL_NEVER"
            ],
            "description": "<p>Determines the behavior when the user overscolls the view.</p>"
        },
        "cacheSize": {
            "values": [],
            "description": "<p>Number of pages to cache (pre-render).</p>"
        },
        "currentPage": {
            "values": [],
            "description": "<p>Index of the active page.</p>"
        },
        "pagingControlColor": {
            "values": [],
            "description": "<p>Color of the paging control, as a color name or hex triplet.</p>"
        },
        "pagingControlHeight": {
            "values": [],
            "description": "<p>Height of the paging control, in pixels.</p>"
        },
        "showPagingControl": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines whether the paging control is visible.</p>"
        },
        "pagingControlTimeout": {
            "values": [],
            "description": "<p>Number of milliseconds to wait before hiding the paging control.</p>"
        },
        "pagingControlAlpha": {
            "values": [],
            "description": "<p>Alpha value of the paging control.</p>"
        },
        "pagingControlOnTop": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines whether the paging control is displayed at the top or bottom of the view.</p>"
        },
        "overlayEnabled": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines whether the paging control is added as an overlay to the view.</p>"
        },
        "views": {
            "values": [],
            "description": "<p>Sets the pages within this Scrollable View.</p>"
        },
        "clipViews": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines whether the previous and next pages are clipped, so that they are not visible \nadjacent to the current page.</p>"
        },
        "hitRect": {
            "values": [],
            "description": "<p>Sets the region where this view responds to gestures.</p>"
        },
        "autocapitalization": {
            "values": [
                "Ti.UI.TEXT_AUTOCAPITALIZATION_ALL",
                "Ti.UI.TEXT_AUTOCAPITALIZATION_NONE",
                "Ti.UI.TEXT_AUTOCAPITALIZATION_SENTENCES",
                "Ti.UI.TEXT_AUTOCAPITALIZATION_WORDS",
                "Ti.UI.TEXT_AUTOCAPITALIZATION_ALL",
                "Ti.UI.TEXT_AUTOCAPITALIZATION_NONE",
                "Ti.UI.TEXT_AUTOCAPITALIZATION_SENTENCES",
                "Ti.UI.TEXT_AUTOCAPITALIZATION_WORDS"
            ],
            "description": "<p>Determines how text is capitalized during typing.</p>"
        },
        "autocorrect": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines whether the text in the search bar is autocorrected during typing.</p>"
        },
        "hinttextid": {
            "values": [],
            "description": "<p>Key identifying a string from the locale file to use for the\n<a href=\"Titanium.UI.SearchBar.hintText\">hintText</a> property.</p>"
        },
        "keyboardType": {
            "values": [
                "Ti.UI.KEYBOARD_APPEARANCE_ALERT",
                "Ti.UI.KEYBOARD_APPEARANCE_DEFAULT",
                "Ti.UI.KEYBOARD_ASCII",
                "Ti.UI.KEYBOARD_DECIMAL_PAD",
                "Ti.UI.KEYBOARD_DEFAULT",
                "Ti.UI.KEYBOARD_EMAIL",
                "Ti.UI.KEYBOARD_NAMEPHONE_PAD",
                "Ti.UI.KEYBOARD_NUMBERS_PUNCTUATION",
                "Ti.UI.KEYBOARD_NUMBER_PAD",
                "Ti.UI.KEYBOARD_PHONE_PAD",
                "Ti.UI.KEYBOARD_URL",
                "Ti.UI.KEYBOARD_APPEARANCE_ALERT",
                "Ti.UI.KEYBOARD_APPEARANCE_DEFAULT",
                "Ti.UI.KEYBOARD_ASCII",
                "Ti.UI.KEYBOARD_DECIMAL_PAD",
                "Ti.UI.KEYBOARD_DEFAULT",
                "Ti.UI.KEYBOARD_EMAIL",
                "Ti.UI.KEYBOARD_NAMEPHONE_PAD",
                "Ti.UI.KEYBOARD_NUMBERS_PUNCTUATION",
                "Ti.UI.KEYBOARD_NUMBER_PAD",
                "Ti.UI.KEYBOARD_PHONE_PAD",
                "Ti.UI.KEYBOARD_URL"
            ],
            "description": "<p>Keyboard type constant to use when the field is focused.</p>"
        },
        "prompt": {
            "values": [],
            "description": "<p>Single line of text displayed at the top of the search bar.</p>"
        },
        "promptid": {
            "values": [],
            "description": "<p>Key identifying a string from the locale file to use for the\n<a href=\"Titanium.UI.SearchBar.prompt\">prompt</a> property.</p>"
        },
        "showBookmark": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines whether the bookmark button is displayed.</p>"
        },
        "showCancel": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines whether the cancel button is displayed.</p>"
        },
        "disabledLeftTrackImage": {
            "values": [],
            "description": "<p>Image URL of the slider left track when in the disabled state.</p>"
        },
        "disabledRightTrackImage": {
            "values": [],
            "description": "<p>Image URL of the slider right track when in the disabled state.</p>"
        },
        "disabledThumbImage": {
            "values": [],
            "description": "<p>Image URL of the slider thumb when in the disabled state.</p>"
        },
        "highlightedLeftTrackImage": {
            "values": [],
            "description": "<p>Image URL of the slider left track when in the highlighted state.</p>"
        },
        "highlightedRightTrackImage": {
            "values": [],
            "description": "<p>Image URL of the slider right track when in the highlighted state.</p>"
        },
        "highlightedThumbImage": {
            "values": [],
            "description": "<p>Image URL of the slider thumb when in the highlighted state.</p>"
        },
        "leftTrackImage": {
            "values": [],
            "description": "<p>Image URL of the slider left track.</p>"
        },
        "leftTrackLeftCap": {
            "values": [],
            "description": "<p>Size of the left end cap for the leftTrackImage, disabledLeftTrackImage, highlightedLeftTrackImage and selectedLeftTrackImage properties.</p>"
        },
        "leftTrackTopCap": {
            "values": [],
            "description": "<p>Size of the top end cap for the leftTrackImage, disabledLeftTrackImage, highlightedLeftTrackImage and selectedLeftTrackImage properties.</p>"
        },
        "maxRange": {
            "values": [],
            "description": "<p>Upper limit on the slider value that can be selected.</p>"
        },
        "minRange": {
            "values": [],
            "description": "<p>Lower limit on the slider value that can be selected.</p>"
        },
        "rightTrackImage": {
            "values": [],
            "description": "<p>Image URL of the slider right track.</p>"
        },
        "rightTrackLeftCap": {
            "values": [],
            "description": "<p>Size of the left end cap for the rightTrackImage, disabledRightTrackImage, highlightedRightTrackImage and selectedRightTrackImage properties.</p>"
        },
        "rightTrackTopCap": {
            "values": [],
            "description": "<p>Size of the top end cap for the rightTrackImage, disabledRightTrackImage, highlightedRightTrackImage and selectedRightTrackImage properties.</p>"
        },
        "selectedLeftTrackImage": {
            "values": [],
            "description": "<p>Image URL of the slider left track when in the selected state.</p>"
        },
        "selectedRightTrackImage": {
            "values": [],
            "description": "<p>Image URL of the slider right track when in the selected state.</p>"
        },
        "selectedThumbImage": {
            "values": [],
            "description": "<p>Image URL of the slider thumb when in the selected state.</p>"
        },
        "thumbImage": {
            "values": [],
            "description": "<p>Image for the slider thumb.</p>"
        },
        "onTintColor": {
            "values": [],
            "description": "<p>The color used to tint the appearance of the switch when it is turned on.</p>"
        },
        "thumbTintColor": {
            "values": [],
            "description": "<p>The color used to tint the appearance of the thumb.</p>"
        },
        "titleOff": {
            "values": [],
            "description": "<p>Text to display on the switch in its \"off\" state, when the toggle button style is in use.</p>"
        },
        "titleOn": {
            "values": [],
            "description": "<p>Text to display on the switch in its \"on\" state, when the toggle button style is in use.</p>"
        },
        "titleColor": {
            "values": [],
            "description": "<p>Defines the color of the title of tab when it's inactive.</p>"
        },
        "activeTitleColor": {
            "values": [],
            "description": "<p>Defines the color of the title of tab when it's active.</p>"
        },
        "active": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p><code>true</code> if this tab is active, <code>false</code> if it is not. </p>"
        },
        "activeIcon": {
            "values": [],
            "description": "<p>Icon URL for this tab when active.</p>"
        },
        "iconIsMask": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Defines if the icon property of the tab must be used as a mask. This property is applicable on iOS 7 and greater.</p>"
        },
        "activeIconIsMask": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Defines if the active icon property of the tab must be used as a mask. This property is applicable on iOS 7 and greater.</p>"
        },
        "activeTab": {
            "values": [],
            "description": "<p>Active tab.</p>"
        },
        "allowUserCustomization": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Allow the user to reorder tabs in the tab group using the <strong>Edit</strong> button on the <strong>More</strong> \ntab.</p>"
        },
        "translucent": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Boolean value indicating if the nav bar (typically for the <strong>More</strong> tab), is translucent.</p>"
        },
        "titleAttributes": {
            "values": [],
            "description": "<p>Title text attributes of the window to be applied on the <strong>More</strong> tab.</p>"
        },
        "navTintColor": {
            "values": [],
            "description": "<p>The tintColor to apply to the navigation bar (typically for the <strong>More</strong> tab). This property is applicable on iOS 7 and greater.</p>"
        },
        "editButtonTitle": {
            "values": [],
            "description": "<p>Title for the edit button on the <strong>More</strong> tab.</p>"
        },
        "exitOnClose": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Boolean value indicating if the application should exit when closing the tab group, whether via Android\nback button or the <a href=\"Titanium.UI.TabGroup.close\">close</a> method.</p>"
        },
        "navBarHidden": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Hide the nav bar (<code>true</code>) or show the nav bar (<code>false</code>) for this tab group.</p>"
        },
        "swipeable": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Boolean value indicating if tab navigation can be done by swipes, in addition to tab clicks.</p>"
        },
        "smoothScrollOnTabClick": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Boolean value indicating if changing pages by tab clicks is animated.</p>"
        },
        "tabs": {
            "values": [],
            "description": "<p>Tabs managed by the tab group.</p>"
        },
        "windowSoftInputMode": {
            "values": [
                "Ti.UI.Android.SOFT_INPUT_ADJUST_PAN",
                "Ti.UI.Android.SOFT_INPUT_ADJUST_RESIZE",
                "Ti.UI.Android.SOFT_INPUT_ADJUST_UNSPECIFIED",
                "Ti.UI.Android.SOFT_INPUT_STATE_ALWAYS_HIDDEN",
                "Ti.UI.Android.SOFT_INPUT_STATE_ALWAYS_VISIBLE",
                "Ti.UI.Android.SOFT_INPUT_STATE_HIDDEN",
                "Ti.UI.Android.SOFT_INPUT_STATE_UNSPECIFIED",
                "Ti.UI.Android.SOFT_INPUT_STATE_VISIBLE",
                "Ti.UI.Android.SOFT_INPUT_ADJUST_PAN",
                "Ti.UI.Android.SOFT_INPUT_ADJUST_RESIZE",
                "Ti.UI.Android.SOFT_INPUT_ADJUST_UNSPECIFIED"
            ],
            "description": "<p>Determines how the tab group is treated when a soft input method (such as a virtual keyboard) \nis displayed.</p>"
        },
        "tabsBackgroundColor": {
            "values": [],
            "description": "<p>Default background color for inactive tabs, as a color name or hex triplet.</p>"
        },
        "tabsTintColor": {
            "values": [],
            "description": "<p>The tintColor to apply to the tabs. This property is applicable on iOS 7 and greater.</p>"
        },
        "tabsBackgroundImage": {
            "values": [],
            "description": "<p>Default background image for tabs.</p>"
        },
        "shadowImage": {
            "values": [],
            "description": "<p>Image of the shadow placed between the tab bar and the content area.</p>"
        },
        "activeTabIconTint": {
            "values": [],
            "description": "<p>Color applied to active tabs icons, as a color name or hex triplet, where the tab's activeIcon was not defined.</p>"
        },
        "tabsBackgroundDisabledColor": {
            "values": [],
            "description": "<p>Default background disabled color for tabs, as a color name or hex triplet.</p>"
        },
        "tabsBackgroundDisabledImage": {
            "values": [],
            "description": "<p>Default background disabled image for tabs.</p>"
        },
        "tabsBackgroundFocusedColor": {
            "values": [],
            "description": "<p>Default background focused color for tabs, as a color name or hex triplet.</p>"
        },
        "tabsBackgroundFocusedImage": {
            "values": [],
            "description": "<p>Default background focused image for tabs.</p>"
        },
        "tabsBackgroundSelectedColor": {
            "values": [],
            "description": "<p>Default background selected color for tabs, as a color name or hex triplet.</p>"
        },
        "tabsBackgroundSelectedImage": {
            "values": [],
            "description": "<p>Default background selected image for tabs.</p>"
        },
        "activeTabBackgroundColor": {
            "values": [],
            "description": "<p>Default background color for the active tab, as a color name or hex triplet.</p>"
        },
        "activeTabBackgroundImage": {
            "values": [],
            "description": "<p>Default background image for the active tab.</p>"
        },
        "activeTabBackgroundDisabledColor": {
            "values": [],
            "description": "<p>Default background disabled color for the active tab, as a color name or hex triplet.</p>"
        },
        "activeTabBackgroundDisabledImage": {
            "values": [],
            "description": "<p>Default background disabled image for the active tab.</p>"
        },
        "activeTabBackgroundFocusedColor": {
            "values": [],
            "description": "<p>Default background focused color for the active tab, as a color name or hex triplet.</p>"
        },
        "activeTabBackgroundFocusedImage": {
            "values": [],
            "description": "<p>Default background focused image for the active tab.</p>"
        },
        "activeTabBackgroundSelectedColor": {
            "values": [],
            "description": "<p>Default background selected color for the active tab, as a color name or hex triplet.</p>"
        },
        "activeTabBackgroundSelectedImage": {
            "values": [],
            "description": "<p>Default background selected image for the active tab.</p>"
        },
        "tabDividerColor": {
            "values": [],
            "description": "<p>Color of the divider between tabs, as a color name or hex triplet.</p>"
        },
        "tabDividerWidth": {
            "values": [],
            "description": "<p>Width of the divider between tabs.</p>"
        },
        "tabHeight": {
            "values": [],
            "description": "<p>Height of the tabs.</p>"
        },
        "tabsAtBottom": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines whether the tabs should be positioned at the top rather than the bottom of the \nscreen.</p>"
        },
        "allowsSelectionDuringEditing": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines whether this table's rows can be selected while editing the table.</p>"
        },
        "headerPullView": {
            "values": [],
            "description": "<p>View positioned above the first row that is only revealed when the user drags the table \ncontents down.</p>"
        },
        "hideSearchOnSelection": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines whether the search field should hide on completion.</p>"
        },
        "moveable": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines the rows' default moveable behavior, which allows them to be re-ordered by the \nuser when the table is in <code>editing</code> or <code>moving</code> mode.</p>"
        },
        "moving": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines whether row moving mode is active.</p>"
        },
        "scrollable": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>If <code>true</code>, the tableview can be scrolled.</p>"
        },
        "searchAsChild": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines whether the <a href=\"Titanium.UI.SearchBar\">SearchBar</a> or <a href=\"Titanium.UI.Android.SearchView\">SearchView</a> appears as part of the TableView.</p>"
        },
        "searchHidden": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines whether the search field is visible.</p>"
        },
        "filterAttribute": {
            "values": [],
            "description": "<p>Filter attribute to be used when searching.</p>"
        },
        "filterAnchored": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines whether the search is limited to the start of the string</p>"
        },
        "filterCaseInsensitive": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines whether the search is case insensitive.</p>"
        },
        "maxRowHeight": {
            "values": [],
            "description": "<p>Maximum row height for table view rows.</p>"
        },
        "minRowHeight": {
            "values": [],
            "description": "<p>Minimum row height for table view rows.</p>"
        },
        "rowHeight": {
            "values": [],
            "description": "<p>Default row height for table view rows.</p>"
        },
        "search": {
            "values": [],
            "description": "<p>Search field to use for the table view.</p>"
        },
        "hasDetail": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines whether a system-provided detail disclosure button is displayed on the right-hand \nside of the row.</p>"
        },
        "indentionLevel": {
            "values": [],
            "description": "<p>Indention level for the row.</p>"
        },
        "leftImage": {
            "values": [],
            "description": "<p>Image to render in the left image area of the row, specified as a local path or URL.</p>"
        },
        "rightImage": {
            "values": [],
            "description": "<p>Image to render in the right image area of the row, specified as a local path or URL.</p>"
        },
        "hasCheck": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines whether a system-provided checkmark is displayed on the right-hand side of \nthe row.</p>"
        },
        "hasChild": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines whether a system-provided arrow is displayed on the right-hand side of the row.</p>"
        },
        "hintTextColor": {
            "values": [],
            "description": "<p>Color of hint text that displays when field is empty.</p>"
        },
        "showUndoRedoActions": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determinates if the undo and redo buttons on the left side of the keyboard should be displayed or not. Only valid on iOS9 and above.</p>"
        },
        "appearance": {
            "values": [
                "Ti.UI.KEYBOARD_APPEARANCE_ALERT",
                "Ti.UI.KEYBOARD_APPEARANCE_DEFAULT",
                "Ti.UI.KEYBOARD_APPEARANCE_ALERT",
                "Ti.UI.KEYBOARD_APPEARANCE_DEFAULT"
            ],
            "description": "<p>Determines the appearance of the keyboard displayed when this text area is focused.</p>"
        },
        "clearOnEdit": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines whether the value of this text area should be cleared when it is focused.</p>"
        },
        "enableReturnKey": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines whether the return key is enabled automatically when there is text in this text \narea.</p>"
        },
        "handleLinks": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Specifies if the text area should allow user interaction with the given URL in the given range of text.</p>"
        },
        "keyboardToolbar": {
            "values": [],
            "description": "<p>Array of toolbar button objects or a <a href=\"Titanium.UI.iOS.Toolbar\">toolbar</a> to be used when the \nkeyboard is displayed.</p>"
        },
        "keyboardToolbarColor": {
            "values": [],
            "description": "<p>Color of the keyboard toolbar if keyboardToolbar is an array, as a color name or hex triplet.</p>"
        },
        "keyboardToolbarHeight": {
            "values": [],
            "description": "<p>Height of the keyboard toolbar if keyboardToolbar is an array.</p>"
        },
        "maxLength": {
            "values": [],
            "description": "<p>Maximum length of text field input.</p>"
        },
        "returnKeyType": {
            "values": [
                "Ti.UI.RETURNKEY_DEFAULT",
                "Ti.UI.RETURNKEY_DONE",
                "Ti.UI.RETURNKEY_EMERGENCY_CALL",
                "Ti.UI.RETURNKEY_GO",
                "Ti.UI.RETURNKEY_GOOGLE",
                "Ti.UI.RETURNKEY_JOIN",
                "Ti.UI.RETURNKEY_NEXT",
                "Ti.UI.RETURNKEY_ROUTE",
                "Ti.UI.RETURNKEY_SEARCH",
                "Ti.UI.RETURNKEY_SEND",
                "Ti.UI.RETURNKEY_YAHOO",
                "Ti.UI.RETURNKEY_DEFAULT",
                "Ti.UI.RETURNKEY_DONE",
                "Ti.UI.RETURNKEY_EMERGENCY_CALL",
                "Ti.UI.RETURNKEY_GO",
                "Ti.UI.RETURNKEY_GOOGLE",
                "Ti.UI.RETURNKEY_JOIN",
                "Ti.UI.RETURNKEY_NEXT",
                "Ti.UI.RETURNKEY_ROUTE",
                "Ti.UI.RETURNKEY_SEARCH",
                "Ti.UI.RETURNKEY_SEND",
                "Ti.UI.RETURNKEY_YAHOO"
            ],
            "description": "<p>Specifies the text to display on the keyboard <code>Return</code> key when this text area is focused.</p>"
        },
        "suppressReturn": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines if the return key should be suppressed during text entry.</p>"
        },
        "attributedHintText": {
            "values": [],
            "description": "<p>Hint text attributed string.</p>"
        },
        "leftButtonPadding": {
            "values": [],
            "description": "<p>Padding between the left button and the edge of the field.</p>"
        },
        "paddingLeft": {
            "values": [],
            "description": "<p>Left padding of this text field.</p>"
        },
        "paddingRight": {
            "values": [],
            "description": "<p>Right padding of this text field.</p>"
        },
        "rightButtonPadding": {
            "values": [],
            "description": "<p>Padding between the right button and the edge of the field.</p>"
        },
        "borderStyle": {
            "values": [
                "Ti.UI.INPUT_BORDERSTYLE_BEZEL",
                "Ti.UI.INPUT_BORDERSTYLE_LINE",
                "Ti.UI.INPUT_BORDERSTYLE_NONE",
                "Ti.UI.INPUT_BORDERSTYLE_ROUNDED"
            ],
            "description": "<p>Border style for the field.</p>"
        },
        "clearButtonMode": {
            "values": [
                "Ti.UI.INPUT_BUTTONMODE_ALWAYS",
                "Ti.UI.INPUT_BUTTONMODE_NEVER",
                "Ti.UI.INPUT_BUTTONMODE_ONBLUR",
                "Ti.UI.INPUT_BUTTONMODE_ONFOCUS"
            ],
            "description": "<p>Determines when the clear button is displayed.</p>"
        },
        "leftButtonMode": {
            "values": [
                "Ti.UI.INPUT_BUTTONMODE_ALWAYS",
                "Ti.UI.INPUT_BUTTONMODE_NEVER",
                "Ti.UI.INPUT_BUTTONMODE_ONBLUR",
                "Ti.UI.INPUT_BUTTONMODE_ONFOCUS"
            ],
            "description": "<p>Determines when to display the left button view.</p>"
        },
        "passwordMask": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Obscure the input text from the user.</p>"
        },
        "rightButtonMode": {
            "values": [
                "Ti.UI.INPUT_BUTTONMODE_ALWAYS",
                "Ti.UI.INPUT_BUTTONMODE_NEVER",
                "Ti.UI.INPUT_BUTTONMODE_ONBLUR",
                "Ti.UI.INPUT_BUTTONMODE_ONFOCUS"
            ],
            "description": "<p>Determines when to display the right button view.</p>"
        },
        "borderTop": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>If <code>true</code>, a border is drawn on the top of the toolbar.</p>"
        },
        "borderBottom": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>If <code>true</code>, a border is drawn on the bottom of the toolbar.</p>"
        },
        "orientation": {
            "values": [],
            "description": "<p>Updates the orientation of the current window to the specified orientation value. <strong>Removed in 3.0.0. Use <a href=\"Titanium.UI.Window.orientationModes\">orientationModes</a> instead.</strong></p>"
        },
        "currentTab": {
            "values": [],
            "description": "<p>The currently active tab, if a tab group is open.</p>"
        },
        "startPoint": {
            "values": [],
            "description": "<p>Start point for the gradient.</p>"
        },
        "endPoint": {
            "values": [],
            "description": "<p>End point for the gradient.</p>"
        },
        "startRadius": {
            "values": [],
            "description": "<p>For a radial gradient, the radius at the <code>startPoint</code>.</p>"
        },
        "endRadius": {
            "values": [],
            "description": "<p>For a radial gradient, the radius at the <code>endPoint</code>.</p>"
        },
        "colors": {
            "values": [],
            "description": "<p>An array of colors, as a color name or hex triplet.</p>"
        },
        "backfillStart": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Set to <code>true</code> to continue filling with the starting color beyond the <code>startPoint</code>.</p>"
        },
        "backfillEnd": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Set to <code>true</code> to continue filling with the final color beyond the <code>endPoint</code>.</p>"
        },
        "offset": {
            "values": [],
            "description": "<p>Offset of this color in the gradient, from 0 (start) to 1 (end).</p>"
        },
        "enableJavascriptInterface": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Enable adding javascript interfaces internally to webview prior to JELLY_BEAN_MR1 (Android 4.2)</p>"
        },
        "handlePlatformUrl": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Lets the webview handle platform supported urls</p>"
        },
        "hideLoadIndicator": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Hides activity indicator when loading remote URL.</p>"
        },
        "ignoreSslError": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Controls whether to ignore invalid SSL certificates or not.</p>"
        },
        "onCreateWindow": {
            "values": [],
            "description": "<p>Callback function called when there is a request for the application to create a new window\nto host new content.</p>"
        },
        "cacheMode": {
            "values": [
                "Ti.UI.Android.WEBVIEW_LOAD_DEFAULT",
                "Ti.UI.Android.WEBVIEW_LOAD_NO_CACHE",
                "Ti.UI.Android.WEBVIEW_LOAD_CACHE_ONLY",
                "Ti.UI.Android.WEBVIEW_LOAD_CACHE_ELSE_NETWORK"
            ],
            "description": "<p>Determines how a cache is used in this web view.</p>"
        },
        "pluginState": {
            "values": [
                "Ti.UI.Android.WEBVIEW_PLUGINS_OFF",
                "Ti.UI.Android.WEBVIEW_PLUGINS_ON",
                "Ti.UI.Android.WEBVIEW_PLUGINS_ON_DEMAND"
            ],
            "description": "<p>Determines how to treat content that requires plugins in this web view.</p>"
        },
        "showScrollbars": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>If <code>true</code>, scrollbars are displayed if content is larger than the web view.</p>"
        },
        "willHandleTouches": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Explicitly specifies if this web view handles touches.</p>"
        },
        "lightTouchEnabled": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Enables using light touches to make a selection and activate mouseovers.</p>"
        },
        "loading": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Indicates if the webview is loading content.</p>"
        },
        "scalesPageToFit": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>If <code>true</code>, scale contents to fit the web view.</p>"
        },
        "backButtonTitle": {
            "values": [],
            "description": "<p>Title for the back button. This is only valid when the window is a child of a tab.</p>"
        },
        "backButtonTitleImage": {
            "values": [],
            "description": "<p>The image to show as the back button. This is only valid when the window is a child of a tab.</p>"
        },
        "barImage": {
            "values": [],
            "description": "<p>Background image for the nav bar, specified as a URL to a local image.</p>"
        },
        "flagSecure": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Treat the content of the window as secure, preventing it from appearing in screenshots or from being viewed on non-secure displays.</p>"
        },
        "includeOpaqueBars": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Specifies if the edges should extend beyond opaque bars (navigation bar, tab bar, toolbar). Valid on iOS 7 and greater.</p>"
        },
        "autoAdjustScrollViewInsets": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Specifies whether or not the view controller should automatically adjust its scroll view insets. Valid on iOS 7 and greater.</p>"
        },
        "leftNavButton": {
            "values": [],
            "description": "<p>View to show in the left nav bar area.</p>"
        },
        "leftNavButtons": {
            "values": [],
            "description": "<p>An Array of views to show in the left nav bar area.</p>"
        },
        "rightNavButton": {
            "values": [],
            "description": "<p>View to show in the right nav bar area.</p>"
        },
        "rightNavButtons": {
            "values": [],
            "description": "<p>An Array of views to show in the right nav bar area.</p>"
        },
        "splitActionBar": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Boolean value to enable split action bar.</p>"
        },
        "statusBarStyle": {
            "values": [
                "Ti.UI.iPhone.StatusBar.DEFAULT",
                "Ti.UI.iPhone.StatusBar.GRAY",
                "Ti.UI.iPhone.StatusBar.GREY",
                "Ti.UI.iPhone.StatusBar.LIGHT_CONTENT",
                "Ti.UI.iPhone.StatusBar.OPAQUE_BLACK",
                "Ti.UI.iPhone.StatusBar.TRANSLUCENT_BLACK",
                "Ti.UI.iPhone.StatusBar.DEFAULT",
                "Ti.UI.iPhone.StatusBar.GRAY",
                "Ti.UI.iPhone.StatusBar.GREY",
                "Ti.UI.iPhone.StatusBar.LIGHT_CONTENT",
                "Ti.UI.iPhone.StatusBar.OPAQUE_BLACK",
                "Ti.UI.iPhone.StatusBar.TRANSLUCENT_BLACK"
            ],
            "description": "<p>The status bar style associated with this window.</p>"
        },
        "tabBarHidden": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Boolean value indicating if the tab bar should be hidden. </p>"
        },
        "titleControl": {
            "values": [],
            "description": "<p>View to show in the title area of the nav bar.</p>"
        },
        "titleImage": {
            "values": [],
            "description": "<p>Image to show in the title area of the nav bar, specified as a local file path or URL.</p>"
        },
        "titlePrompt": {
            "values": [],
            "description": "<p>Title prompt for the window.</p>"
        },
        "titlepromptid": {
            "values": [],
            "description": "<p>Key identifying a string from the locale file to use for the window title prompt.</p>"
        },
        "toolbar": {
            "values": [],
            "description": "<p>Array of button objects to show in the window's toolbar.</p>"
        },
        "transitionAnimation": {
            "values": [],
            "description": "<p>Use a transition animation when opening or closing windows in a\n<a href=\"Titanium.UI.iOS.NavigationWindow\">NavigationWindow</a> or <a href=\"Titanium.UI.Tab\">Tab</a>.</p>"
        },
        "windowFlags": {
            "values": [],
            "description": "<p>Additional flags to set on the Activity Window.</p>"
        },
        "windowPixelFormat": {
            "values": [
                "Ti.UI.Android.PIXEL_FORMAT_A_8",
                "Ti.UI.Android.PIXEL_FORMAT_LA_88",
                "Ti.UI.Android.PIXEL_FORMAT_L_8",
                "Ti.UI.Android.PIXEL_FORMAT_OPAQUE",
                "Ti.UI.Android.PIXEL_FORMAT_RGBA_4444",
                "Ti.UI.Android.PIXEL_FORMAT_RGBA_5551",
                "Ti.UI.Android.PIXEL_FORMAT_RGBA_8888",
                "Ti.UI.Android.PIXEL_FORMAT_RGBX_8888",
                "Ti.UI.Android.PIXEL_FORMAT_RGB_332",
                "Ti.UI.Android.PIXEL_FORMAT_RGB_565",
                "Ti.UI.Android.PIXEL_FORMAT_RGB_888",
                "Ti.UI.Android.PIXEL_FORMAT_TRANSLUCENT",
                "Ti.UI.Android.PIXEL_FORMAT_TRANSPARENT",
                "Ti.UI.Android.PIXEL_FORMAT_UNKNOWN"
            ],
            "description": "<p>Set the pixel format for the Activity's Window.</p>"
        },
        "extendEdges": {
            "values": [
                "Ti.UI.EXTEND_EDGE_ALL",
                "Ti.UI.EXTEND_EDGE_BOTTOM",
                "Ti.UI.EXTEND_EDGE_LEFT",
                "Ti.UI.EXTEND_EDGE_NONE",
                "Ti.UI.EXTEND_EDGE_RIGHT",
                "Ti.UI.EXTEND_EDGE_TOP",
                "Ti.UI.EXTEND_EDGE_ALL",
                "Ti.UI.EXTEND_EDGE_BOTTOM",
                "Ti.UI.EXTEND_EDGE_LEFT",
                "Ti.UI.EXTEND_EDGE_NONE",
                "Ti.UI.EXTEND_EDGE_RIGHT",
                "Ti.UI.EXTEND_EDGE_TOP"
            ],
            "description": "<p>An array of supported values specified using the EXTEND_EDGE constants in <a href=\"Titanium.UI\">UI</a>. Valid on iOS 7 and greater.</p>"
        },
        "hideShadow": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Set this to true to hide the shadow image of the navigation bar.</p>"
        },
        "modal": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Indicates to open a modal window or not.</p>"
        },
        "orientationModes": {
            "values": [
                "Ti.UI.LANDSCAPE_LEFT",
                "Ti.UI.LANDSCAPE_RIGHT",
                "Ti.UI.PORTRAIT",
                "Ti.UI.UPSIDE_PORTRAIT",
                "Ti.UI.LANDSCAPE_LEFT",
                "Ti.UI.LANDSCAPE_RIGHT",
                "Ti.UI.PORTRAIT",
                "Ti.UI.UPSIDE_PORTRAIT"
            ],
            "description": "<p>Array of supported orientation modes, specified using the orientation\nconstants defined in <a href=\"Titanium.UI\">UI</a>.</p>"
        },
        "modalStyle": {
            "values": [
                "Ti.UI.iPhone.MODAL_PRESENTATION_CURRENT_CONTEXT",
                "Ti.UI.iPhone.MODAL_PRESENTATION_FORMSHEET",
                "Ti.UI.iPhone.MODAL_PRESENTATION_FULLSCREEN",
                "Ti.UI.iPhone.MODAL_PRESENTATION_PAGESHEET"
            ],
            "description": "<p>Presentation style of this modal window.</p>"
        },
        "modalTransitionStyle": {
            "values": [
                "Ti.UI.iPhone.MODAL_TRANSITION_STYLE_COVER_VERTICAL",
                "Ti.UI.iPhone.MODAL_TRANSITION_STYLE_CROSS_DISSOLVE",
                "Ti.UI.iPhone.MODAL_TRANSITION_STYLE_FLIP_HORIZONTAL",
                "Ti.UI.iPhone.MODAL_TRANSITION_STYLE_PARTIAL_CURL"
            ],
            "description": "<p>Transition style of this modal window.</p>"
        },
        "activityEnterAnimation": {
            "values": [],
            "description": "<p>Animation resource to run on the activity (heavyweight window) being opened.</p>"
        },
        "activityExitAnimation": {
            "values": [],
            "description": "<p>Animation resource to run on the activity that is being put in background as a heavyweight window is being opened above it.</p>"
        },
        "shadow": {
            "values": [],
            "description": "<p>Shadow color and offset for the window title.</p>"
        },
        "blurRadius": {
            "values": [],
            "description": "<p>Specifies the blur radius of the shadow.</p>"
        },
        "adSize": {
            "values": [
                "Ti.UI.iOS.AD_SIZE_PORTRAIT",
                "Ti.UI.iOS.AD_SIZE_LANDSCAPE"
            ],
            "description": "<p>Size of the advertisement when minimized.</p>"
        },
        "anchor": {
            "values": [],
            "description": "<p>Anchor point for the attachment behavior relative to the animator's coordinate system.</p>"
        },
        "damping": {
            "values": [],
            "description": "<p>Amount of damping to apply to the attachment behavior.</p>"
        },
        "distance": {
            "values": [],
            "description": "<p>Distance, in points, between the two attachment points.</p>"
        },
        "item": {
            "values": [],
            "description": "<p>Item to connect to use the attachment behavior.</p>"
        },
        "behaviors": {
            "values": [],
            "description": "<p>Behaviors associated with this animator.</p>"
        },
        "referenceView": {
            "values": [],
            "description": "<p>Titanium View object to initialize as the reference view for the animator.</p>"
        },
        "collisionMode": {
            "values": [
                "Ti.UI.iOS.COLLISION_MODE_ALL",
                "Ti.UI.iOS.COLLISION_MODE_BOUNDARY",
                "Ti.UI.iOS.COLLISION_MODE_ITEM"
            ],
            "description": "<p>Specifies the collision behavior.</p>"
        },
        "referenceInsets": {
            "values": [],
            "description": "<p>Insets to apply when using the animator's reference view as the boundary.</p>"
        },
        "treatReferenceAsBoundary": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Use the animator's reference view as the boundary.</p>"
        },
        "point1": {
            "values": [],
            "description": "<p>Start point for the boundary</p>"
        },
        "point2": {
            "values": [],
            "description": "<p>End point for the boundary</p>"
        },
        "allowsRotation": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Specifies if this item can rotate.</p>"
        },
        "angularResistance": {
            "values": [],
            "description": "<p>Specifies the angular resistance of this item.</p>"
        },
        "density": {
            "values": [],
            "description": "<p>Specifies the relative mass density of this item.</p>"
        },
        "elasticity": {
            "values": [],
            "description": "<p>Specifies the elasticity applied to collisions for this item.</p>"
        },
        "friction": {
            "values": [],
            "description": "<p>Specifies the linear resistance of the item when it slides against another item.</p>"
        },
        "resistance": {
            "values": [],
            "description": "<p>Specifies the linear resistance of this item which reduces linear velocity over time.</p>"
        },
        "angle": {
            "values": [],
            "description": "<p>Specifies the angle of the gravity vector in radians.</p>"
        },
        "gravityDirection": {
            "values": [],
            "description": "<p>Specifies the direction of the gravity vector as an x, y pair.</p>"
        },
        "magnitude": {
            "values": [],
            "description": "<p>Specifies the magnitude of the gravity vector.</p>"
        },
        "pushDirection": {
            "values": [],
            "description": "<p>Specifies the direction of the force vector as an x, y pair.</p>"
        },
        "pushMode": {
            "values": [
                "Ti.UI.iOS.PUSH_MODE_CONTINUOUS",
                "Ti.UI.iOS.PUSH_MODE_INSTANTANEOUS"
            ],
            "description": "<p>Specifies the push mode.</p>"
        },
        "snapPoint": {
            "values": [],
            "description": "<p>Specifies the point to snap to.</p>"
        },
        "detailView": {
            "values": [],
            "description": "<p>View for the detail view section of the SplitWindow.</p>"
        },
        "masterView": {
            "values": [],
            "description": "<p>View for the master view section of the SplitWindow.</p>"
        },
        "showMasterInPortrait": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines whether to show the master view in portrait orientation.</p>"
        },
        "masterIsOverlayed": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines whether to show the master view is overlayed in portrait orientation.</p>"
        },
        "portraitSplit": {
            "values": [],
            "description": "<p>Determines the width of the <code>masterView</code> in portrait mode.</p>"
        },
        "landscapeSplit": {
            "values": [],
            "description": "<p>Determines the width of the <code>masterView</code> in landscape mode.</p>"
        },
        "extendBackground": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>If <code>true</code>, the background of the toolbar extends upwards.</p>"
        },
        "anchorItem": {
            "values": [],
            "description": "<p>Item to use as the anchor in this behavior.</p>"
        },
        "anchorOffset": {
            "values": [],
            "description": "<p>Offset from the center point of the anchor item for the attachment.</p>"
        },
        "itemOffset": {
            "values": [],
            "description": "<p>Offset from the center point of the item for the attachment.</p>"
        },
        "transitionFrom": {
            "values": [],
            "description": "<p>Animation to hide the current window.</p>"
        },
        "tranistionTo": {
            "values": [],
            "description": "<p>Animation to show the new window.</p>"
        },
        "passthroughViews": {
            "values": [],
            "description": "<p>Passthrough views to use when the popover is shown.</p>"
        },
        "appBadge": {
            "values": [],
            "description": "<p>Value of the badge for the application's springboard icon.</p>"
        },
        "appSupportsShakeToEdit": {
            "values": [
                "true",
                "false"
            ],
            "description": "<p>Determines whether the shake to edit system-wide capability is enabled.</p>"
        },
        "nodeValue": {
            "values": [],
            "description": "<p>Content (value) of this node.</p>"
        },
        "prefix": {
            "values": [],
            "description": "<p>Namespace prefix of this node.</p>"
        },
        "localName": {
            "values": [],
            "description": "<p>Local part of the qualified name of this node.</p>"
        },
        "started": {
            "values": [],
            "description": ""
        }
    },
    "tags": [
        "X509CertificatePinningSecurityManager",
        "IntentChooser",
        "PendingIntent",
        "Service",
        "ServiceIntent",
        "BroadcastIntent",
        "BroadcastReceiver",
        "Intent",
        "Notification",
        "RemoteViews",
        "Event",
        "Alert",
        "Reminder",
        "UserDefaults",
        "SearchableIndex",
        "SearchableItem",
        "SearchableItemAttributeSet",
        "UserActivity",
        "UserNotificationAction",
        "UserNotificationCategory",
        "Event",
        "Alert",
        "Reminder",
        "RecurrenceRule",
        "Group",
        "Person",
        "LoginButton",
        "Directory",
        "File",
        "Timestamp",
        "TempDirectory",
        "TempFile",
        "LocationProvider",
        "LocationRule",
        "Annotation",
        "View",
        "AudioPlayer",
        "AudioRecorder",
        "Sound",
        "VideoPlayer",
        "TCPSocket",
        "BonjourBrowser",
        "BonjourService",
        "Cookie",
        "HTTPClient",
        "TCP",
        "UUID",
        "Stream",
        "Buffer",
        "Proxy",
        "ProgressIndicator",
        "SearchView",
        "NavigationGroup",
        "2DMatrix",
        "View",
        "3DMatrix",
        "ActivityIndicator",
        "AlertDialog",
        "Animation",
        "AttributedString",
        "Button",
        "ButtonBar",
        "CoverFlowView",
        "DashboardItem",
        "DashboardView",
        "EmailDialog",
        "ImageView",
        "Label",
        "ListSection",
        "ListView",
        "MaskedImage",
        "Notification",
        "OptionDialog",
        "Picker",
        "PickerColumn",
        "PickerRow",
        "ProgressBar",
        "RefreshControl",
        "ScrollView",
        "ScrollableView",
        "SearchBar",
        "Slider",
        "Switch",
        "Tab",
        "TabGroup",
        "TabbedBar",
        "TableView",
        "TableViewRow",
        "TableViewSection",
        "TextArea",
        "TextField",
        "Toolbar",
        "WebView",
        "Window",
        "TransitionAnimation",
        "3DMatrix",
        "AdView",
        "AnchorAttachmentBehavior",
        "Animator",
        "Attribute",
        "AttributedString",
        "CollisionBehavior",
        "CoverFlowView",
        "DocumentViewer",
        "DynamicItemBehavior",
        "GravityBehavior",
        "NavigationWindow",
        "PushBehavior",
        "SnapBehavior",
        "SplitWindow",
        "TabbedBar",
        "Toolbar",
        "ViewAttachmentBehavior",
        "DocumentViewer",
        "Popover",
        "SplitWindow",
        "NavigationGroup",
        "DocumentType",
        "Document",
        "Element",
        "DocumentFragment",
        "TextNode",
        "Comment",
        "CDATASection",
        "ProcessingInstruction",
        "Attribute",
        "EntityReference",
        "ElementNS",
        "AttributeNS"
    ]
}